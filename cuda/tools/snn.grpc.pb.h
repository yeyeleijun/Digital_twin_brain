// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snn.proto
#ifndef GRPC_snn_2eproto__INCLUDED
#define GRPC_snn_2eproto__INCLUDED

#include "snn.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace snn {

class Snn final {
 public:
  static constexpr char const* service_full_name() {
    return "snn.Snn";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::snn::InitResponse>> Init(::grpc::ClientContext* context, const ::snn::InitRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::snn::InitResponse>>(InitRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::snn::InitRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::InitResponse>>(AsyncInitRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::snn::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::snn::RunResponse>> Run(::grpc::ClientContext* context, const ::snn::RunRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::snn::RunResponse>>(RunRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::RunResponse>> AsyncRun(::grpc::ClientContext* context, const ::snn::RunRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::RunResponse>>(AsyncRunRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::RunResponse>> PrepareAsyncRun(::grpc::ClientContext* context, const ::snn::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::RunResponse>>(PrepareAsyncRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::snn::MetricResponse>> Measure(::grpc::ClientContext* context, const ::snn::MetricRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::snn::MetricResponse>>(MeasureRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::MetricResponse>> AsyncMeasure(::grpc::ClientContext* context, const ::snn::MetricRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::MetricResponse>>(AsyncMeasureRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::MetricResponse>> PrepareAsyncMeasure(::grpc::ClientContext* context, const ::snn::MetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::snn::MetricResponse>>(PrepareAsyncMeasureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::snn::UpdatePropRequest>> Updateprop(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::snn::UpdatePropRequest>>(UpdatepropRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdatePropRequest>> AsyncUpdateprop(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdatePropRequest>>(AsyncUpdatepropRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdatePropRequest>> PrepareAsyncUpdateprop(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdatePropRequest>>(PrepareAsyncUpdatepropRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::snn::UpdateGammaRequest>> Updategamma(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::snn::UpdateGammaRequest>>(UpdategammaRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateGammaRequest>> AsyncUpdategamma(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateGammaRequest>>(AsyncUpdategammaRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateGammaRequest>> PrepareAsyncUpdategamma(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateGammaRequest>>(PrepareAsyncUpdategammaRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>> Updategammawithresult(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>>(UpdategammawithresultRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>> AsyncUpdategammawithresult(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>>(AsyncUpdategammawithresultRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>> PrepareAsyncUpdategammawithresult(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>>(PrepareAsyncUpdategammawithresultRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::snn::UpdateHyperParaRequest>> Updatehyperpara(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::snn::UpdateHyperParaRequest>>(UpdatehyperparaRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateHyperParaRequest>> AsyncUpdatehyperpara(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateHyperParaRequest>>(AsyncUpdatehyperparaRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateHyperParaRequest>> PrepareAsyncUpdatehyperpara(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateHyperParaRequest>>(PrepareAsyncUpdatehyperparaRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::snn::UpdateSampleRequest>> Updatesample(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::snn::UpdateSampleRequest>>(UpdatesampleRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateSampleRequest>> AsyncUpdatesample(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateSampleRequest>>(AsyncUpdatesampleRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateSampleRequest>> PrepareAsyncUpdatesample(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::snn::UpdateSampleRequest>>(PrepareAsyncUpdatesampleRaw(context, response, cq));
    }
    virtual ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::snn::ShutdownResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snn::ShutdownResponse>> AsyncShutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snn::ShutdownResponse>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snn::ShutdownResponse>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::snn::ShutdownResponse>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void Init(::grpc::ClientContext* context, ::snn::InitRequest* request, ::grpc::experimental::ClientReadReactor< ::snn::InitResponse>* reactor) = 0;
      virtual void Run(::grpc::ClientContext* context, ::snn::RunRequest* request, ::grpc::experimental::ClientReadReactor< ::snn::RunResponse>* reactor) = 0;
      virtual void Measure(::grpc::ClientContext* context, ::snn::MetricRequest* request, ::grpc::experimental::ClientReadReactor< ::snn::MetricResponse>* reactor) = 0;
      virtual void Updateprop(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdatePropRequest>* reactor) = 0;
      virtual void Updategamma(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdateGammaRequest>* reactor) = 0;
      virtual void Updategammawithresult(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::snn::UpdateGammaRequest,::snn::UpdateGammaWithResultResponse>* reactor) = 0;
      virtual void Updatehyperpara(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdateHyperParaRequest>* reactor) = 0;
      virtual void Updatesample(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdateSampleRequest>* reactor) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest* request, ::snn::ShutdownResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::snn::ShutdownResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest* request, ::snn::ShutdownResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::snn::ShutdownResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::snn::InitResponse>* InitRaw(::grpc::ClientContext* context, const ::snn::InitRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::snn::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::snn::InitRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::snn::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::snn::InitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::snn::RunResponse>* RunRaw(::grpc::ClientContext* context, const ::snn::RunRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::snn::RunResponse>* AsyncRunRaw(::grpc::ClientContext* context, const ::snn::RunRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::snn::RunResponse>* PrepareAsyncRunRaw(::grpc::ClientContext* context, const ::snn::RunRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::snn::MetricResponse>* MeasureRaw(::grpc::ClientContext* context, const ::snn::MetricRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::snn::MetricResponse>* AsyncMeasureRaw(::grpc::ClientContext* context, const ::snn::MetricRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::snn::MetricResponse>* PrepareAsyncMeasureRaw(::grpc::ClientContext* context, const ::snn::MetricRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::snn::UpdatePropRequest>* UpdatepropRaw(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::snn::UpdatePropRequest>* AsyncUpdatepropRaw(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::snn::UpdatePropRequest>* PrepareAsyncUpdatepropRaw(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::snn::UpdateGammaRequest>* UpdategammaRaw(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::snn::UpdateGammaRequest>* AsyncUpdategammaRaw(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::snn::UpdateGammaRequest>* PrepareAsyncUpdategammaRaw(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>* UpdategammawithresultRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>* AsyncUpdategammawithresultRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>* PrepareAsyncUpdategammawithresultRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::snn::UpdateHyperParaRequest>* UpdatehyperparaRaw(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::snn::UpdateHyperParaRequest>* AsyncUpdatehyperparaRaw(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::snn::UpdateHyperParaRequest>* PrepareAsyncUpdatehyperparaRaw(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::snn::UpdateSampleRequest>* UpdatesampleRaw(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::snn::UpdateSampleRequest>* AsyncUpdatesampleRaw(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::snn::UpdateSampleRequest>* PrepareAsyncUpdatesampleRaw(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snn::ShutdownResponse>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::snn::ShutdownResponse>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::snn::InitResponse>> Init(::grpc::ClientContext* context, const ::snn::InitRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::snn::InitResponse>>(InitRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::InitResponse>> AsyncInit(::grpc::ClientContext* context, const ::snn::InitRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::InitResponse>>(AsyncInitRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::InitResponse>> PrepareAsyncInit(::grpc::ClientContext* context, const ::snn::InitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::InitResponse>>(PrepareAsyncInitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::snn::RunResponse>> Run(::grpc::ClientContext* context, const ::snn::RunRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::snn::RunResponse>>(RunRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::RunResponse>> AsyncRun(::grpc::ClientContext* context, const ::snn::RunRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::RunResponse>>(AsyncRunRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::RunResponse>> PrepareAsyncRun(::grpc::ClientContext* context, const ::snn::RunRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::RunResponse>>(PrepareAsyncRunRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::snn::MetricResponse>> Measure(::grpc::ClientContext* context, const ::snn::MetricRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::snn::MetricResponse>>(MeasureRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::MetricResponse>> AsyncMeasure(::grpc::ClientContext* context, const ::snn::MetricRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::MetricResponse>>(AsyncMeasureRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::MetricResponse>> PrepareAsyncMeasure(::grpc::ClientContext* context, const ::snn::MetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::snn::MetricResponse>>(PrepareAsyncMeasureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::snn::UpdatePropRequest>> Updateprop(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::snn::UpdatePropRequest>>(UpdatepropRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdatePropRequest>> AsyncUpdateprop(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdatePropRequest>>(AsyncUpdatepropRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdatePropRequest>> PrepareAsyncUpdateprop(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdatePropRequest>>(PrepareAsyncUpdatepropRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::snn::UpdateGammaRequest>> Updategamma(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::snn::UpdateGammaRequest>>(UpdategammaRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateGammaRequest>> AsyncUpdategamma(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateGammaRequest>>(AsyncUpdategammaRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateGammaRequest>> PrepareAsyncUpdategamma(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateGammaRequest>>(PrepareAsyncUpdategammaRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>> Updategammawithresult(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>>(UpdategammawithresultRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>> AsyncUpdategammawithresult(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>>(AsyncUpdategammawithresultRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>> PrepareAsyncUpdategammawithresult(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>>(PrepareAsyncUpdategammawithresultRaw(context, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::snn::UpdateHyperParaRequest>> Updatehyperpara(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::snn::UpdateHyperParaRequest>>(UpdatehyperparaRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateHyperParaRequest>> AsyncUpdatehyperpara(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateHyperParaRequest>>(AsyncUpdatehyperparaRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateHyperParaRequest>> PrepareAsyncUpdatehyperpara(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateHyperParaRequest>>(PrepareAsyncUpdatehyperparaRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::snn::UpdateSampleRequest>> Updatesample(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::snn::UpdateSampleRequest>>(UpdatesampleRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateSampleRequest>> AsyncUpdatesample(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateSampleRequest>>(AsyncUpdatesampleRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateSampleRequest>> PrepareAsyncUpdatesample(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::snn::UpdateSampleRequest>>(PrepareAsyncUpdatesampleRaw(context, response, cq));
    }
    ::grpc::Status Shutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::snn::ShutdownResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snn::ShutdownResponse>> AsyncShutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snn::ShutdownResponse>>(AsyncShutdownRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snn::ShutdownResponse>> PrepareAsyncShutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::snn::ShutdownResponse>>(PrepareAsyncShutdownRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Init(::grpc::ClientContext* context, ::snn::InitRequest* request, ::grpc::experimental::ClientReadReactor< ::snn::InitResponse>* reactor) override;
      void Run(::grpc::ClientContext* context, ::snn::RunRequest* request, ::grpc::experimental::ClientReadReactor< ::snn::RunResponse>* reactor) override;
      void Measure(::grpc::ClientContext* context, ::snn::MetricRequest* request, ::grpc::experimental::ClientReadReactor< ::snn::MetricResponse>* reactor) override;
      void Updateprop(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdatePropRequest>* reactor) override;
      void Updategamma(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdateGammaRequest>* reactor) override;
      void Updategammawithresult(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::snn::UpdateGammaRequest,::snn::UpdateGammaWithResultResponse>* reactor) override;
      void Updatehyperpara(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdateHyperParaRequest>* reactor) override;
      void Updatesample(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdateSampleRequest>* reactor) override;
      void Shutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest* request, ::snn::ShutdownResponse* response, std::function<void(::grpc::Status)>) override;
      void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::snn::ShutdownResponse* response, std::function<void(::grpc::Status)>) override;
      void Shutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest* request, ::snn::ShutdownResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::snn::ShutdownResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::snn::InitResponse>* InitRaw(::grpc::ClientContext* context, const ::snn::InitRequest& request) override;
    ::grpc::ClientAsyncReader< ::snn::InitResponse>* AsyncInitRaw(::grpc::ClientContext* context, const ::snn::InitRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::snn::InitResponse>* PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::snn::InitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::snn::RunResponse>* RunRaw(::grpc::ClientContext* context, const ::snn::RunRequest& request) override;
    ::grpc::ClientAsyncReader< ::snn::RunResponse>* AsyncRunRaw(::grpc::ClientContext* context, const ::snn::RunRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::snn::RunResponse>* PrepareAsyncRunRaw(::grpc::ClientContext* context, const ::snn::RunRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::snn::MetricResponse>* MeasureRaw(::grpc::ClientContext* context, const ::snn::MetricRequest& request) override;
    ::grpc::ClientAsyncReader< ::snn::MetricResponse>* AsyncMeasureRaw(::grpc::ClientContext* context, const ::snn::MetricRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::snn::MetricResponse>* PrepareAsyncMeasureRaw(::grpc::ClientContext* context, const ::snn::MetricRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::snn::UpdatePropRequest>* UpdatepropRaw(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response) override;
    ::grpc::ClientAsyncWriter< ::snn::UpdatePropRequest>* AsyncUpdatepropRaw(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::snn::UpdatePropRequest>* PrepareAsyncUpdatepropRaw(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::snn::UpdateGammaRequest>* UpdategammaRaw(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response) override;
    ::grpc::ClientAsyncWriter< ::snn::UpdateGammaRequest>* AsyncUpdategammaRaw(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::snn::UpdateGammaRequest>* PrepareAsyncUpdategammaRaw(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>* UpdategammawithresultRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>* AsyncUpdategammawithresultRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>* PrepareAsyncUpdategammawithresultRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::snn::UpdateHyperParaRequest>* UpdatehyperparaRaw(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response) override;
    ::grpc::ClientAsyncWriter< ::snn::UpdateHyperParaRequest>* AsyncUpdatehyperparaRaw(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::snn::UpdateHyperParaRequest>* PrepareAsyncUpdatehyperparaRaw(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::snn::UpdateSampleRequest>* UpdatesampleRaw(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response) override;
    ::grpc::ClientAsyncWriter< ::snn::UpdateSampleRequest>* AsyncUpdatesampleRaw(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::snn::UpdateSampleRequest>* PrepareAsyncUpdatesampleRaw(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snn::ShutdownResponse>* AsyncShutdownRaw(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::snn::ShutdownResponse>* PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Init_;
    const ::grpc::internal::RpcMethod rpcmethod_Run_;
    const ::grpc::internal::RpcMethod rpcmethod_Measure_;
    const ::grpc::internal::RpcMethod rpcmethod_Updateprop_;
    const ::grpc::internal::RpcMethod rpcmethod_Updategamma_;
    const ::grpc::internal::RpcMethod rpcmethod_Updategammawithresult_;
    const ::grpc::internal::RpcMethod rpcmethod_Updatehyperpara_;
    const ::grpc::internal::RpcMethod rpcmethod_Updatesample_;
    const ::grpc::internal::RpcMethod rpcmethod_Shutdown_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Init(::grpc::ServerContext* context, const ::snn::InitRequest* request, ::grpc::ServerWriter< ::snn::InitResponse>* writer);
    virtual ::grpc::Status Run(::grpc::ServerContext* context, const ::snn::RunRequest* request, ::grpc::ServerWriter< ::snn::RunResponse>* writer);
    virtual ::grpc::Status Measure(::grpc::ServerContext* context, const ::snn::MetricRequest* request, ::grpc::ServerWriter< ::snn::MetricResponse>* writer);
    virtual ::grpc::Status Updateprop(::grpc::ServerContext* context, ::grpc::ServerReader< ::snn::UpdatePropRequest>* reader, ::snn::UpdatePropResponse* response);
    virtual ::grpc::Status Updategamma(::grpc::ServerContext* context, ::grpc::ServerReader< ::snn::UpdateGammaRequest>* reader, ::snn::UpdateGammaResponse* response);
    virtual ::grpc::Status Updategammawithresult(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::snn::UpdateGammaWithResultResponse, ::snn::UpdateGammaRequest>* stream);
    virtual ::grpc::Status Updatehyperpara(::grpc::ServerContext* context, ::grpc::ServerReader< ::snn::UpdateHyperParaRequest>* reader, ::snn::UpdateHyperParaResponse* response);
    virtual ::grpc::Status Updatesample(::grpc::ServerContext* context, ::grpc::ServerReader< ::snn::UpdateSampleRequest>* reader, ::snn::UpdateSampleResponse* response);
    virtual ::grpc::Status Shutdown(::grpc::ServerContext* context, const ::snn::ShutdownRequest* request, ::snn::ShutdownResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Init() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::snn::InitRequest* /*request*/, ::grpc::ServerWriter< ::snn::InitResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::snn::InitRequest* request, ::grpc::ServerAsyncWriter< ::snn::InitResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Run : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Run() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Run() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Run(::grpc::ServerContext* /*context*/, const ::snn::RunRequest* /*request*/, ::grpc::ServerWriter< ::snn::RunResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRun(::grpc::ServerContext* context, ::snn::RunRequest* request, ::grpc::ServerAsyncWriter< ::snn::RunResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Measure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Measure() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Measure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Measure(::grpc::ServerContext* /*context*/, const ::snn::MetricRequest* /*request*/, ::grpc::ServerWriter< ::snn::MetricResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMeasure(::grpc::ServerContext* context, ::snn::MetricRequest* request, ::grpc::ServerAsyncWriter< ::snn::MetricResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Updateprop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Updateprop() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Updateprop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updateprop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdatePropRequest>* /*reader*/, ::snn::UpdatePropResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateprop(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::snn::UpdatePropResponse, ::snn::UpdatePropRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Updategamma : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Updategamma() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Updategamma() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updategamma(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateGammaRequest>* /*reader*/, ::snn::UpdateGammaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdategamma(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::snn::UpdateGammaResponse, ::snn::UpdateGammaRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Updategammawithresult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Updategammawithresult() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_Updategammawithresult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updategammawithresult(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::snn::UpdateGammaWithResultResponse, ::snn::UpdateGammaRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdategammawithresult(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::snn::UpdateGammaWithResultResponse, ::snn::UpdateGammaRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Updatehyperpara : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Updatehyperpara() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Updatehyperpara() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updatehyperpara(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateHyperParaRequest>* /*reader*/, ::snn::UpdateHyperParaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatehyperpara(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::snn::UpdateHyperParaResponse, ::snn::UpdateHyperParaRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(6, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Updatesample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Updatesample() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_Updatesample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updatesample(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateSampleRequest>* /*reader*/, ::snn::UpdateSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatesample(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::snn::UpdateSampleResponse, ::snn::UpdateSampleRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(7, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Shutdown() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::snn::ShutdownRequest* /*request*/, ::snn::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::snn::ShutdownRequest* request, ::grpc::ServerAsyncResponseWriter< ::snn::ShutdownResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Init<WithAsyncMethod_Run<WithAsyncMethod_Measure<WithAsyncMethod_Updateprop<WithAsyncMethod_Updategamma<WithAsyncMethod_Updategammawithresult<WithAsyncMethod_Updatehyperpara<WithAsyncMethod_Updatesample<WithAsyncMethod_Shutdown<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Init() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::snn::InitRequest, ::snn::InitResponse>(
          [this] { return this->Init(); }));
    }
    ~ExperimentalWithCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::snn::InitRequest* /*request*/, ::grpc::ServerWriter< ::snn::InitResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::snn::InitRequest, ::snn::InitResponse>* Init() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::snn::InitRequest, ::snn::InitResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Run : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Run() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::snn::RunRequest, ::snn::RunResponse>(
          [this] { return this->Run(); }));
    }
    ~ExperimentalWithCallbackMethod_Run() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Run(::grpc::ServerContext* /*context*/, const ::snn::RunRequest* /*request*/, ::grpc::ServerWriter< ::snn::RunResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::snn::RunRequest, ::snn::RunResponse>* Run() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::snn::RunRequest, ::snn::RunResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Measure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Measure() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::snn::MetricRequest, ::snn::MetricResponse>(
          [this] { return this->Measure(); }));
    }
    ~ExperimentalWithCallbackMethod_Measure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Measure(::grpc::ServerContext* /*context*/, const ::snn::MetricRequest* /*request*/, ::grpc::ServerWriter< ::snn::MetricResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::snn::MetricRequest, ::snn::MetricResponse>* Measure() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::snn::MetricRequest, ::snn::MetricResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Updateprop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Updateprop() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::snn::UpdatePropRequest, ::snn::UpdatePropResponse>(
          [this] { return this->Updateprop(); }));
    }
    ~ExperimentalWithCallbackMethod_Updateprop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updateprop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdatePropRequest>* /*reader*/, ::snn::UpdatePropResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::snn::UpdatePropRequest, ::snn::UpdatePropResponse>* Updateprop() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::snn::UpdatePropRequest, ::snn::UpdatePropResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Updategamma : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Updategamma() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::snn::UpdateGammaRequest, ::snn::UpdateGammaResponse>(
          [this] { return this->Updategamma(); }));
    }
    ~ExperimentalWithCallbackMethod_Updategamma() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updategamma(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateGammaRequest>* /*reader*/, ::snn::UpdateGammaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::snn::UpdateGammaRequest, ::snn::UpdateGammaResponse>* Updategamma() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::snn::UpdateGammaRequest, ::snn::UpdateGammaResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Updategammawithresult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Updategammawithresult() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc_impl::internal::CallbackBidiHandler< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>(
          [this] { return this->Updategammawithresult(); }));
    }
    ~ExperimentalWithCallbackMethod_Updategammawithresult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updategammawithresult(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::snn::UpdateGammaWithResultResponse, ::snn::UpdateGammaRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>* Updategammawithresult() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Updatehyperpara : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Updatehyperpara() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::snn::UpdateHyperParaRequest, ::snn::UpdateHyperParaResponse>(
          [this] { return this->Updatehyperpara(); }));
    }
    ~ExperimentalWithCallbackMethod_Updatehyperpara() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updatehyperpara(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateHyperParaRequest>* /*reader*/, ::snn::UpdateHyperParaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::snn::UpdateHyperParaRequest, ::snn::UpdateHyperParaResponse>* Updatehyperpara() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::snn::UpdateHyperParaRequest, ::snn::UpdateHyperParaResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Updatesample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Updatesample() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::snn::UpdateSampleRequest, ::snn::UpdateSampleResponse>(
          [this] { return this->Updatesample(); }));
    }
    ~ExperimentalWithCallbackMethod_Updatesample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updatesample(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateSampleRequest>* /*reader*/, ::snn::UpdateSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::snn::UpdateSampleRequest, ::snn::UpdateSampleResponse>* Updatesample() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::snn::UpdateSampleRequest, ::snn::UpdateSampleResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Shutdown() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::snn::ShutdownRequest, ::snn::ShutdownResponse>(
          [this](::grpc::ServerContext* context,
                 const ::snn::ShutdownRequest* request,
                 ::snn::ShutdownResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Shutdown(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_Shutdown(
        ::grpc::experimental::MessageAllocator< ::snn::ShutdownRequest, ::snn::ShutdownResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::snn::ShutdownRequest, ::snn::ShutdownResponse>*>(
          ::grpc::Service::experimental().GetHandler(8))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::snn::ShutdownRequest* /*request*/, ::snn::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Shutdown(::grpc::ServerContext* /*context*/, const ::snn::ShutdownRequest* /*request*/, ::snn::ShutdownResponse* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_Init<ExperimentalWithCallbackMethod_Run<ExperimentalWithCallbackMethod_Measure<ExperimentalWithCallbackMethod_Updateprop<ExperimentalWithCallbackMethod_Updategamma<ExperimentalWithCallbackMethod_Updategammawithresult<ExperimentalWithCallbackMethod_Updatehyperpara<ExperimentalWithCallbackMethod_Updatesample<ExperimentalWithCallbackMethod_Shutdown<Service > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Init() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::snn::InitRequest* /*request*/, ::grpc::ServerWriter< ::snn::InitResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Run : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Run() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Run() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Run(::grpc::ServerContext* /*context*/, const ::snn::RunRequest* /*request*/, ::grpc::ServerWriter< ::snn::RunResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Measure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Measure() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Measure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Measure(::grpc::ServerContext* /*context*/, const ::snn::MetricRequest* /*request*/, ::grpc::ServerWriter< ::snn::MetricResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Updateprop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Updateprop() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Updateprop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updateprop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdatePropRequest>* /*reader*/, ::snn::UpdatePropResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Updategamma : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Updategamma() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Updategamma() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updategamma(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateGammaRequest>* /*reader*/, ::snn::UpdateGammaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Updategammawithresult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Updategammawithresult() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_Updategammawithresult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updategammawithresult(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::snn::UpdateGammaWithResultResponse, ::snn::UpdateGammaRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Updatehyperpara : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Updatehyperpara() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Updatehyperpara() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updatehyperpara(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateHyperParaRequest>* /*reader*/, ::snn::UpdateHyperParaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Updatesample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Updatesample() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_Updatesample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updatesample(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateSampleRequest>* /*reader*/, ::snn::UpdateSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Shutdown() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::snn::ShutdownRequest* /*request*/, ::snn::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Init() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::snn::InitRequest* /*request*/, ::grpc::ServerWriter< ::snn::InitResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Run : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Run() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Run() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Run(::grpc::ServerContext* /*context*/, const ::snn::RunRequest* /*request*/, ::grpc::ServerWriter< ::snn::RunResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRun(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Measure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Measure() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Measure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Measure(::grpc::ServerContext* /*context*/, const ::snn::MetricRequest* /*request*/, ::grpc::ServerWriter< ::snn::MetricResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMeasure(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Updateprop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Updateprop() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Updateprop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updateprop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdatePropRequest>* /*reader*/, ::snn::UpdatePropResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateprop(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(3, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Updategamma : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Updategamma() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Updategamma() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updategamma(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateGammaRequest>* /*reader*/, ::snn::UpdateGammaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdategamma(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(4, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Updategammawithresult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Updategammawithresult() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_Updategammawithresult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updategammawithresult(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::snn::UpdateGammaWithResultResponse, ::snn::UpdateGammaRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdategammawithresult(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(5, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Updatehyperpara : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Updatehyperpara() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Updatehyperpara() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updatehyperpara(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateHyperParaRequest>* /*reader*/, ::snn::UpdateHyperParaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatehyperpara(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(6, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Updatesample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Updatesample() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_Updatesample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updatesample(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateSampleRequest>* /*reader*/, ::snn::UpdateSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatesample(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(7, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Shutdown() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::snn::ShutdownRequest* /*request*/, ::snn::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShutdown(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Init() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Init(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::snn::InitRequest* /*request*/, ::grpc::ServerWriter< ::snn::InitResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Init() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Run : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Run() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Run(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Run() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Run(::grpc::ServerContext* /*context*/, const ::snn::RunRequest* /*request*/, ::grpc::ServerWriter< ::snn::RunResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Run() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Measure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Measure() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Measure(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Measure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Measure(::grpc::ServerContext* /*context*/, const ::snn::MetricRequest* /*request*/, ::grpc::ServerWriter< ::snn::MetricResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Measure() {
      return new ::grpc_impl::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Updateprop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Updateprop() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Updateprop(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Updateprop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updateprop(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdatePropRequest>* /*reader*/, ::snn::UpdatePropResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Updateprop() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Updategamma : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Updategamma() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Updategamma(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Updategamma() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updategamma(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateGammaRequest>* /*reader*/, ::snn::UpdateGammaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Updategamma() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Updategammawithresult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Updategammawithresult() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc_impl::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Updategammawithresult(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Updategammawithresult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updategammawithresult(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::snn::UpdateGammaWithResultResponse, ::snn::UpdateGammaRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Updategammawithresult() {
      return new ::grpc_impl::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Updatehyperpara : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Updatehyperpara() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Updatehyperpara(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Updatehyperpara() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updatehyperpara(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateHyperParaRequest>* /*reader*/, ::snn::UpdateHyperParaResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Updatehyperpara() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Updatesample : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Updatesample() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc_impl::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->Updatesample(); }));
    }
    ~ExperimentalWithRawCallbackMethod_Updatesample() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Updatesample(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::snn::UpdateSampleRequest>* /*reader*/, ::snn::UpdateSampleResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Updatesample() {
      return new ::grpc_impl::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Shutdown() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Shutdown(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::snn::ShutdownRequest* /*request*/, ::snn::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Shutdown(::grpc::ServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Shutdown : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Shutdown() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::snn::ShutdownRequest, ::snn::ShutdownResponse>(std::bind(&WithStreamedUnaryMethod_Shutdown<BaseClass>::StreamedShutdown, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Shutdown() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Shutdown(::grpc::ServerContext* /*context*/, const ::snn::ShutdownRequest* /*request*/, ::snn::ShutdownResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShutdown(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::snn::ShutdownRequest,::snn::ShutdownResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Shutdown<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Init : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Init() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::snn::InitRequest, ::snn::InitResponse>(std::bind(&WithSplitStreamingMethod_Init<BaseClass>::StreamedInit, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Init() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Init(::grpc::ServerContext* /*context*/, const ::snn::InitRequest* /*request*/, ::grpc::ServerWriter< ::snn::InitResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedInit(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::snn::InitRequest,::snn::InitResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Run : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Run() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::snn::RunRequest, ::snn::RunResponse>(std::bind(&WithSplitStreamingMethod_Run<BaseClass>::StreamedRun, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Run() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Run(::grpc::ServerContext* /*context*/, const ::snn::RunRequest* /*request*/, ::grpc::ServerWriter< ::snn::RunResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedRun(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::snn::RunRequest,::snn::RunResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_Measure : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Measure() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::snn::MetricRequest, ::snn::MetricResponse>(std::bind(&WithSplitStreamingMethod_Measure<BaseClass>::StreamedMeasure, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_Measure() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Measure(::grpc::ServerContext* /*context*/, const ::snn::MetricRequest* /*request*/, ::grpc::ServerWriter< ::snn::MetricResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedMeasure(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::snn::MetricRequest,::snn::MetricResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Init<WithSplitStreamingMethod_Run<WithSplitStreamingMethod_Measure<Service > > > SplitStreamedService;
  typedef WithSplitStreamingMethod_Init<WithSplitStreamingMethod_Run<WithSplitStreamingMethod_Measure<WithStreamedUnaryMethod_Shutdown<Service > > > > StreamedService;
};

}  // namespace snn


#endif  // GRPC_snn_2eproto__INCLUDED
