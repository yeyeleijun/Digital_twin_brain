// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: snn.proto

#include "snn.pb.h"
#include "snn.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace snn {

static const char* Snn_method_names[] = {
  "/snn.Snn/Init",
  "/snn.Snn/Run",
  "/snn.Snn/Measure",
  "/snn.Snn/Updateprop",
  "/snn.Snn/Updategamma",
  "/snn.Snn/Updategammawithresult",
  "/snn.Snn/Updatehyperpara",
  "/snn.Snn/Updatesample",
  "/snn.Snn/Shutdown",
};

std::unique_ptr< Snn::Stub> Snn::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Snn::Stub> stub(new Snn::Stub(channel));
  return stub;
}

Snn::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Init_(Snn_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Run_(Snn_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Measure_(Snn_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Updateprop_(Snn_method_names[3], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Updategamma_(Snn_method_names[4], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Updategammawithresult_(Snn_method_names[5], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_Updatehyperpara_(Snn_method_names[6], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Updatesample_(Snn_method_names[7], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Shutdown_(Snn_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::snn::InitResponse>* Snn::Stub::InitRaw(::grpc::ClientContext* context, const ::snn::InitRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::snn::InitResponse>::Create(channel_.get(), rpcmethod_Init_, context, request);
}

void Snn::Stub::experimental_async::Init(::grpc::ClientContext* context, ::snn::InitRequest* request, ::grpc::experimental::ClientReadReactor< ::snn::InitResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::snn::InitResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Init_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::snn::InitResponse>* Snn::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::snn::InitRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::snn::InitResponse>::Create(channel_.get(), cq, rpcmethod_Init_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::snn::InitResponse>* Snn::Stub::PrepareAsyncInitRaw(::grpc::ClientContext* context, const ::snn::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::snn::InitResponse>::Create(channel_.get(), cq, rpcmethod_Init_, context, request, false, nullptr);
}

::grpc::ClientReader< ::snn::RunResponse>* Snn::Stub::RunRaw(::grpc::ClientContext* context, const ::snn::RunRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::snn::RunResponse>::Create(channel_.get(), rpcmethod_Run_, context, request);
}

void Snn::Stub::experimental_async::Run(::grpc::ClientContext* context, ::snn::RunRequest* request, ::grpc::experimental::ClientReadReactor< ::snn::RunResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::snn::RunResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Run_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::snn::RunResponse>* Snn::Stub::AsyncRunRaw(::grpc::ClientContext* context, const ::snn::RunRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::snn::RunResponse>::Create(channel_.get(), cq, rpcmethod_Run_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::snn::RunResponse>* Snn::Stub::PrepareAsyncRunRaw(::grpc::ClientContext* context, const ::snn::RunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::snn::RunResponse>::Create(channel_.get(), cq, rpcmethod_Run_, context, request, false, nullptr);
}

::grpc::ClientReader< ::snn::MetricResponse>* Snn::Stub::MeasureRaw(::grpc::ClientContext* context, const ::snn::MetricRequest& request) {
  return ::grpc_impl::internal::ClientReaderFactory< ::snn::MetricResponse>::Create(channel_.get(), rpcmethod_Measure_, context, request);
}

void Snn::Stub::experimental_async::Measure(::grpc::ClientContext* context, ::snn::MetricRequest* request, ::grpc::experimental::ClientReadReactor< ::snn::MetricResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderFactory< ::snn::MetricResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Measure_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::snn::MetricResponse>* Snn::Stub::AsyncMeasureRaw(::grpc::ClientContext* context, const ::snn::MetricRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::snn::MetricResponse>::Create(channel_.get(), cq, rpcmethod_Measure_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::snn::MetricResponse>* Snn::Stub::PrepareAsyncMeasureRaw(::grpc::ClientContext* context, const ::snn::MetricRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderFactory< ::snn::MetricResponse>::Create(channel_.get(), cq, rpcmethod_Measure_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::snn::UpdatePropRequest>* Snn::Stub::UpdatepropRaw(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::snn::UpdatePropRequest>::Create(channel_.get(), rpcmethod_Updateprop_, context, response);
}

void Snn::Stub::experimental_async::Updateprop(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdatePropRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::snn::UpdatePropRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Updateprop_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::snn::UpdatePropRequest>* Snn::Stub::AsyncUpdatepropRaw(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::snn::UpdatePropRequest>::Create(channel_.get(), cq, rpcmethod_Updateprop_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::snn::UpdatePropRequest>* Snn::Stub::PrepareAsyncUpdatepropRaw(::grpc::ClientContext* context, ::snn::UpdatePropResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::snn::UpdatePropRequest>::Create(channel_.get(), cq, rpcmethod_Updateprop_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::snn::UpdateGammaRequest>* Snn::Stub::UpdategammaRaw(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::snn::UpdateGammaRequest>::Create(channel_.get(), rpcmethod_Updategamma_, context, response);
}

void Snn::Stub::experimental_async::Updategamma(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdateGammaRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::snn::UpdateGammaRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Updategamma_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::snn::UpdateGammaRequest>* Snn::Stub::AsyncUpdategammaRaw(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::snn::UpdateGammaRequest>::Create(channel_.get(), cq, rpcmethod_Updategamma_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::snn::UpdateGammaRequest>* Snn::Stub::PrepareAsyncUpdategammaRaw(::grpc::ClientContext* context, ::snn::UpdateGammaResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::snn::UpdateGammaRequest>::Create(channel_.get(), cq, rpcmethod_Updategamma_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>* Snn::Stub::UpdategammawithresultRaw(::grpc::ClientContext* context) {
  return ::grpc_impl::internal::ClientReaderWriterFactory< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>::Create(channel_.get(), rpcmethod_Updategammawithresult_, context);
}

void Snn::Stub::experimental_async::Updategammawithresult(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::snn::UpdateGammaRequest,::snn::UpdateGammaWithResultResponse>* reactor) {
  ::grpc_impl::internal::ClientCallbackReaderWriterFactory< ::snn::UpdateGammaRequest,::snn::UpdateGammaWithResultResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Updategammawithresult_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>* Snn::Stub::AsyncUpdategammawithresultRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>::Create(channel_.get(), cq, rpcmethod_Updategammawithresult_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>* Snn::Stub::PrepareAsyncUpdategammawithresultRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncReaderWriterFactory< ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>::Create(channel_.get(), cq, rpcmethod_Updategammawithresult_, context, false, nullptr);
}

::grpc::ClientWriter< ::snn::UpdateHyperParaRequest>* Snn::Stub::UpdatehyperparaRaw(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::snn::UpdateHyperParaRequest>::Create(channel_.get(), rpcmethod_Updatehyperpara_, context, response);
}

void Snn::Stub::experimental_async::Updatehyperpara(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdateHyperParaRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::snn::UpdateHyperParaRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Updatehyperpara_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::snn::UpdateHyperParaRequest>* Snn::Stub::AsyncUpdatehyperparaRaw(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::snn::UpdateHyperParaRequest>::Create(channel_.get(), cq, rpcmethod_Updatehyperpara_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::snn::UpdateHyperParaRequest>* Snn::Stub::PrepareAsyncUpdatehyperparaRaw(::grpc::ClientContext* context, ::snn::UpdateHyperParaResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::snn::UpdateHyperParaRequest>::Create(channel_.get(), cq, rpcmethod_Updatehyperpara_, context, response, false, nullptr);
}

::grpc::ClientWriter< ::snn::UpdateSampleRequest>* Snn::Stub::UpdatesampleRaw(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response) {
  return ::grpc_impl::internal::ClientWriterFactory< ::snn::UpdateSampleRequest>::Create(channel_.get(), rpcmethod_Updatesample_, context, response);
}

void Snn::Stub::experimental_async::Updatesample(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::experimental::ClientWriteReactor< ::snn::UpdateSampleRequest>* reactor) {
  ::grpc_impl::internal::ClientCallbackWriterFactory< ::snn::UpdateSampleRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_Updatesample_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::snn::UpdateSampleRequest>* Snn::Stub::AsyncUpdatesampleRaw(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::snn::UpdateSampleRequest>::Create(channel_.get(), cq, rpcmethod_Updatesample_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::snn::UpdateSampleRequest>* Snn::Stub::PrepareAsyncUpdatesampleRaw(::grpc::ClientContext* context, ::snn::UpdateSampleResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncWriterFactory< ::snn::UpdateSampleRequest>::Create(channel_.get(), cq, rpcmethod_Updatesample_, context, response, false, nullptr);
}

::grpc::Status Snn::Stub::Shutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::snn::ShutdownResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Shutdown_, context, request, response);
}

void Snn::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest* request, ::snn::ShutdownResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void Snn::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::snn::ShutdownResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, std::move(f));
}

void Snn::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::snn::ShutdownRequest* request, ::snn::ShutdownResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

void Snn::Stub::experimental_async::Shutdown(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::snn::ShutdownResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Shutdown_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::snn::ShutdownResponse>* Snn::Stub::AsyncShutdownRaw(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::snn::ShutdownResponse>::Create(channel_.get(), cq, rpcmethod_Shutdown_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::snn::ShutdownResponse>* Snn::Stub::PrepareAsyncShutdownRaw(::grpc::ClientContext* context, const ::snn::ShutdownRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::snn::ShutdownResponse>::Create(channel_.get(), cq, rpcmethod_Shutdown_, context, request, false);
}

Snn::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Snn_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Snn::Service, ::snn::InitRequest, ::snn::InitResponse>(
          std::mem_fn(&Snn::Service::Init), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Snn_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Snn::Service, ::snn::RunRequest, ::snn::RunResponse>(
          std::mem_fn(&Snn::Service::Run), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Snn_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Snn::Service, ::snn::MetricRequest, ::snn::MetricResponse>(
          std::mem_fn(&Snn::Service::Measure), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Snn_method_names[3],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Snn::Service, ::snn::UpdatePropRequest, ::snn::UpdatePropResponse>(
          std::mem_fn(&Snn::Service::Updateprop), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Snn_method_names[4],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Snn::Service, ::snn::UpdateGammaRequest, ::snn::UpdateGammaResponse>(
          std::mem_fn(&Snn::Service::Updategamma), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Snn_method_names[5],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Snn::Service, ::snn::UpdateGammaRequest, ::snn::UpdateGammaWithResultResponse>(
          std::mem_fn(&Snn::Service::Updategammawithresult), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Snn_method_names[6],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Snn::Service, ::snn::UpdateHyperParaRequest, ::snn::UpdateHyperParaResponse>(
          std::mem_fn(&Snn::Service::Updatehyperpara), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Snn_method_names[7],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Snn::Service, ::snn::UpdateSampleRequest, ::snn::UpdateSampleResponse>(
          std::mem_fn(&Snn::Service::Updatesample), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Snn_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Snn::Service, ::snn::ShutdownRequest, ::snn::ShutdownResponse>(
          std::mem_fn(&Snn::Service::Shutdown), this)));
}

Snn::Service::~Service() {
}

::grpc::Status Snn::Service::Init(::grpc::ServerContext* context, const ::snn::InitRequest* request, ::grpc::ServerWriter< ::snn::InitResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Snn::Service::Run(::grpc::ServerContext* context, const ::snn::RunRequest* request, ::grpc::ServerWriter< ::snn::RunResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Snn::Service::Measure(::grpc::ServerContext* context, const ::snn::MetricRequest* request, ::grpc::ServerWriter< ::snn::MetricResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Snn::Service::Updateprop(::grpc::ServerContext* context, ::grpc::ServerReader< ::snn::UpdatePropRequest>* reader, ::snn::UpdatePropResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Snn::Service::Updategamma(::grpc::ServerContext* context, ::grpc::ServerReader< ::snn::UpdateGammaRequest>* reader, ::snn::UpdateGammaResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Snn::Service::Updategammawithresult(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::snn::UpdateGammaWithResultResponse, ::snn::UpdateGammaRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Snn::Service::Updatehyperpara(::grpc::ServerContext* context, ::grpc::ServerReader< ::snn::UpdateHyperParaRequest>* reader, ::snn::UpdateHyperParaResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Snn::Service::Updatesample(::grpc::ServerContext* context, ::grpc::ServerReader< ::snn::UpdateSampleRequest>* reader, ::snn::UpdateSampleResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Snn::Service::Shutdown(::grpc::ServerContext* context, const ::snn::ShutdownRequest* request, ::snn::ShutdownResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace snn

