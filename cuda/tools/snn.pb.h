// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snn.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_snn_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_snn_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snn_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_snn_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snn_2eproto;
namespace snn {
class InitRequest;
class InitRequestDefaultTypeInternal;
extern InitRequestDefaultTypeInternal _InitRequest_default_instance_;
class InitResponse;
class InitResponseDefaultTypeInternal;
extern InitResponseDefaultTypeInternal _InitResponse_default_instance_;
class MetricInfo;
class MetricInfoDefaultTypeInternal;
extern MetricInfoDefaultTypeInternal _MetricInfo_default_instance_;
class MetricRequest;
class MetricRequestDefaultTypeInternal;
extern MetricRequestDefaultTypeInternal _MetricRequest_default_instance_;
class MetricResponse;
class MetricResponseDefaultTypeInternal;
extern MetricResponseDefaultTypeInternal _MetricResponse_default_instance_;
class RunRequest;
class RunRequestDefaultTypeInternal;
extern RunRequestDefaultTypeInternal _RunRequest_default_instance_;
class RunResponse;
class RunResponseDefaultTypeInternal;
extern RunResponseDefaultTypeInternal _RunResponse_default_instance_;
class ShutdownRequest;
class ShutdownRequestDefaultTypeInternal;
extern ShutdownRequestDefaultTypeInternal _ShutdownRequest_default_instance_;
class ShutdownResponse;
class ShutdownResponseDefaultTypeInternal;
extern ShutdownResponseDefaultTypeInternal _ShutdownResponse_default_instance_;
class SubblockInfo;
class SubblockInfoDefaultTypeInternal;
extern SubblockInfoDefaultTypeInternal _SubblockInfo_default_instance_;
class UpdateGammaRequest;
class UpdateGammaRequestDefaultTypeInternal;
extern UpdateGammaRequestDefaultTypeInternal _UpdateGammaRequest_default_instance_;
class UpdateGammaResponse;
class UpdateGammaResponseDefaultTypeInternal;
extern UpdateGammaResponseDefaultTypeInternal _UpdateGammaResponse_default_instance_;
class UpdateGammaWithResultResponse;
class UpdateGammaWithResultResponseDefaultTypeInternal;
extern UpdateGammaWithResultResponseDefaultTypeInternal _UpdateGammaWithResultResponse_default_instance_;
class UpdateHyperParaRequest;
class UpdateHyperParaRequestDefaultTypeInternal;
extern UpdateHyperParaRequestDefaultTypeInternal _UpdateHyperParaRequest_default_instance_;
class UpdateHyperParaResponse;
class UpdateHyperParaResponseDefaultTypeInternal;
extern UpdateHyperParaResponseDefaultTypeInternal _UpdateHyperParaResponse_default_instance_;
class UpdatePropRequest;
class UpdatePropRequestDefaultTypeInternal;
extern UpdatePropRequestDefaultTypeInternal _UpdatePropRequest_default_instance_;
class UpdatePropResponse;
class UpdatePropResponseDefaultTypeInternal;
extern UpdatePropResponseDefaultTypeInternal _UpdatePropResponse_default_instance_;
class UpdateSampleRequest;
class UpdateSampleRequestDefaultTypeInternal;
extern UpdateSampleRequestDefaultTypeInternal _UpdateSampleRequest_default_instance_;
class UpdateSampleResponse;
class UpdateSampleResponseDefaultTypeInternal;
extern UpdateSampleResponseDefaultTypeInternal _UpdateSampleResponse_default_instance_;
}  // namespace snn
PROTOBUF_NAMESPACE_OPEN
template<> ::snn::InitRequest* Arena::CreateMaybeMessage<::snn::InitRequest>(Arena*);
template<> ::snn::InitResponse* Arena::CreateMaybeMessage<::snn::InitResponse>(Arena*);
template<> ::snn::MetricInfo* Arena::CreateMaybeMessage<::snn::MetricInfo>(Arena*);
template<> ::snn::MetricRequest* Arena::CreateMaybeMessage<::snn::MetricRequest>(Arena*);
template<> ::snn::MetricResponse* Arena::CreateMaybeMessage<::snn::MetricResponse>(Arena*);
template<> ::snn::RunRequest* Arena::CreateMaybeMessage<::snn::RunRequest>(Arena*);
template<> ::snn::RunResponse* Arena::CreateMaybeMessage<::snn::RunResponse>(Arena*);
template<> ::snn::ShutdownRequest* Arena::CreateMaybeMessage<::snn::ShutdownRequest>(Arena*);
template<> ::snn::ShutdownResponse* Arena::CreateMaybeMessage<::snn::ShutdownResponse>(Arena*);
template<> ::snn::SubblockInfo* Arena::CreateMaybeMessage<::snn::SubblockInfo>(Arena*);
template<> ::snn::UpdateGammaRequest* Arena::CreateMaybeMessage<::snn::UpdateGammaRequest>(Arena*);
template<> ::snn::UpdateGammaResponse* Arena::CreateMaybeMessage<::snn::UpdateGammaResponse>(Arena*);
template<> ::snn::UpdateGammaWithResultResponse* Arena::CreateMaybeMessage<::snn::UpdateGammaWithResultResponse>(Arena*);
template<> ::snn::UpdateHyperParaRequest* Arena::CreateMaybeMessage<::snn::UpdateHyperParaRequest>(Arena*);
template<> ::snn::UpdateHyperParaResponse* Arena::CreateMaybeMessage<::snn::UpdateHyperParaResponse>(Arena*);
template<> ::snn::UpdatePropRequest* Arena::CreateMaybeMessage<::snn::UpdatePropRequest>(Arena*);
template<> ::snn::UpdatePropResponse* Arena::CreateMaybeMessage<::snn::UpdatePropResponse>(Arena*);
template<> ::snn::UpdateSampleRequest* Arena::CreateMaybeMessage<::snn::UpdateSampleRequest>(Arena*);
template<> ::snn::UpdateSampleResponse* Arena::CreateMaybeMessage<::snn::UpdateSampleResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace snn {

enum InitRequest_CommMode : int {
  InitRequest_CommMode_COMM_POINT_TO_POINT = 0,
  InitRequest_CommMode_COMM_ROUTE_WITHOUT_MERGE = 1,
  InitRequest_CommMode_COMM_ROUTE_WITH_MERGE = 2,
  InitRequest_CommMode_InitRequest_CommMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InitRequest_CommMode_InitRequest_CommMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InitRequest_CommMode_IsValid(int value);
constexpr InitRequest_CommMode InitRequest_CommMode_CommMode_MIN = InitRequest_CommMode_COMM_POINT_TO_POINT;
constexpr InitRequest_CommMode InitRequest_CommMode_CommMode_MAX = InitRequest_CommMode_COMM_ROUTE_WITH_MERGE;
constexpr int InitRequest_CommMode_CommMode_ARRAYSIZE = InitRequest_CommMode_CommMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InitRequest_CommMode_descriptor();
template<typename T>
inline const std::string& InitRequest_CommMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InitRequest_CommMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InitRequest_CommMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InitRequest_CommMode_descriptor(), enum_t_value);
}
inline bool InitRequest_CommMode_Parse(
    const std::string& name, InitRequest_CommMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InitRequest_CommMode>(
    InitRequest_CommMode_descriptor(), name, value);
}
enum RunRequest_Strategy : int {
  RunRequest_Strategy_STRATEGY_SEND_SEQUENTIAL = 0,
  RunRequest_Strategy_STRATEGY_SEND_PAIRWISE = 1,
  RunRequest_Strategy_STRATEGY_SEND_RANDOM = 2,
  RunRequest_Strategy_RunRequest_Strategy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RunRequest_Strategy_RunRequest_Strategy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RunRequest_Strategy_IsValid(int value);
constexpr RunRequest_Strategy RunRequest_Strategy_Strategy_MIN = RunRequest_Strategy_STRATEGY_SEND_SEQUENTIAL;
constexpr RunRequest_Strategy RunRequest_Strategy_Strategy_MAX = RunRequest_Strategy_STRATEGY_SEND_RANDOM;
constexpr int RunRequest_Strategy_Strategy_ARRAYSIZE = RunRequest_Strategy_Strategy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunRequest_Strategy_descriptor();
template<typename T>
inline const std::string& RunRequest_Strategy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RunRequest_Strategy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RunRequest_Strategy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RunRequest_Strategy_descriptor(), enum_t_value);
}
inline bool RunRequest_Strategy_Parse(
    const std::string& name, RunRequest_Strategy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RunRequest_Strategy>(
    RunRequest_Strategy_descriptor(), name, value);
}
enum SnnStatus : int {
  SNN_OK = 0,
  SNN_INVALID_PARAMETER = 1,
  SNN_UNSET_SAMPLE_FAILURE = 2,
  SNN_UNSUPPORTED = 3,
  SnnStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SnnStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SnnStatus_IsValid(int value);
constexpr SnnStatus SnnStatus_MIN = SNN_OK;
constexpr SnnStatus SnnStatus_MAX = SNN_UNSUPPORTED;
constexpr int SnnStatus_ARRAYSIZE = SnnStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnnStatus_descriptor();
template<typename T>
inline const std::string& SnnStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SnnStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SnnStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SnnStatus_descriptor(), enum_t_value);
}
inline bool SnnStatus_Parse(
    const std::string& name, SnnStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SnnStatus>(
    SnnStatus_descriptor(), name, value);
}
enum PropType : int {
  EXT_STIMULI_I = 0,
  MEMBRANE_C = 1,
  REF_T = 2,
  LEAKAGE_G = 3,
  LEAKAGE_V = 4,
  THRESHOLD_V = 5,
  RESET_V = 6,
  CONDUCT_G_AMPA = 7,
  CONDUCT_G_NMDA = 8,
  CONDUCT_G_GABAa = 9,
  CONDUCT_G_GABAb = 10,
  MEMBRANE_V_AMPA = 11,
  MEMBRANE_V_NMDA = 12,
  MEMBRANE_V_GABAa = 13,
  MEMBRANE_V_GABAb = 14,
  TAO_AMPA = 15,
  TAO_NMDA = 16,
  TAO_GABAa = 17,
  TAO_GABAb = 18,
  NOISE_RATE = 19,
  PropType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PropType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PropType_IsValid(int value);
constexpr PropType PropType_MIN = EXT_STIMULI_I;
constexpr PropType PropType_MAX = NOISE_RATE;
constexpr int PropType_ARRAYSIZE = PropType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropType_descriptor();
template<typename T>
inline const std::string& PropType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PropType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PropType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PropType_descriptor(), enum_t_value);
}
inline bool PropType_Parse(
    const std::string& name, PropType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PropType>(
    PropType_descriptor(), name, value);
}
// ===================================================================

class InitRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.InitRequest) */ {
 public:
  InitRequest();
  virtual ~InitRequest();

  InitRequest(const InitRequest& from);
  InitRequest(InitRequest&& from) noexcept
    : InitRequest() {
    *this = ::std::move(from);
  }

  inline InitRequest& operator=(const InitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitRequest& operator=(InitRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitRequest* internal_default_instance() {
    return reinterpret_cast<const InitRequest*>(
               &_InitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(InitRequest* other);
  friend void swap(InitRequest& a, InitRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitRequest* New() const final {
    return CreateMaybeMessage<InitRequest>(nullptr);
  }

  InitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitRequest& from);
  void MergeFrom(const InitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.InitRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef InitRequest_CommMode CommMode;
  static constexpr CommMode COMM_POINT_TO_POINT =
    InitRequest_CommMode_COMM_POINT_TO_POINT;
  static constexpr CommMode COMM_ROUTE_WITHOUT_MERGE =
    InitRequest_CommMode_COMM_ROUTE_WITHOUT_MERGE;
  static constexpr CommMode COMM_ROUTE_WITH_MERGE =
    InitRequest_CommMode_COMM_ROUTE_WITH_MERGE;
  static inline bool CommMode_IsValid(int value) {
    return InitRequest_CommMode_IsValid(value);
  }
  static constexpr CommMode CommMode_MIN =
    InitRequest_CommMode_CommMode_MIN;
  static constexpr CommMode CommMode_MAX =
    InitRequest_CommMode_CommMode_MAX;
  static constexpr int CommMode_ARRAYSIZE =
    InitRequest_CommMode_CommMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommMode_descriptor() {
    return InitRequest_CommMode_descriptor();
  }
  template<typename T>
  static inline const std::string& CommMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommMode_Name.");
    return InitRequest_CommMode_Name(enum_t_value);
  }
  static inline bool CommMode_Parse(const std::string& name,
      CommMode* value) {
    return InitRequest_CommMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string file_path = 1;
  void clear_file_path();
  static const int kFilePathFieldNumber = 1;
  const std::string& file_path() const;
  void set_file_path(const std::string& value);
  void set_file_path(std::string&& value);
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  std::string* mutable_file_path();
  std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);

  // string route_path = 2;
  void clear_route_path();
  static const int kRoutePathFieldNumber = 2;
  const std::string& route_path() const;
  void set_route_path(const std::string& value);
  void set_route_path(std::string&& value);
  void set_route_path(const char* value);
  void set_route_path(const char* value, size_t size);
  std::string* mutable_route_path();
  std::string* release_route_path();
  void set_allocated_route_path(std::string* route_path);

  // float delta_t = 3;
  void clear_delta_t();
  static const int kDeltaTFieldNumber = 3;
  float delta_t() const;
  void set_delta_t(float value);

  // .snn.InitRequest.CommMode mode = 4;
  void clear_mode();
  static const int kModeFieldNumber = 4;
  ::snn::InitRequest_CommMode mode() const;
  void set_mode(::snn::InitRequest_CommMode value);

  // @@protoc_insertion_point(class_scope:snn.InitRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr route_path_;
  float delta_t_;
  int mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class SubblockInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.SubblockInfo) */ {
 public:
  SubblockInfo();
  virtual ~SubblockInfo();

  SubblockInfo(const SubblockInfo& from);
  SubblockInfo(SubblockInfo&& from) noexcept
    : SubblockInfo() {
    *this = ::std::move(from);
  }

  inline SubblockInfo& operator=(const SubblockInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubblockInfo& operator=(SubblockInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubblockInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubblockInfo* internal_default_instance() {
    return reinterpret_cast<const SubblockInfo*>(
               &_SubblockInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SubblockInfo* other);
  friend void swap(SubblockInfo& a, SubblockInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SubblockInfo* New() const final {
    return CreateMaybeMessage<SubblockInfo>(nullptr);
  }

  SubblockInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubblockInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubblockInfo& from);
  void MergeFrom(const SubblockInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubblockInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.SubblockInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 subblk_id = 1;
  void clear_subblk_id();
  static const int kSubblkIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 subblk_id() const;
  void set_subblk_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 subblk_num = 2;
  void clear_subblk_num();
  static const int kSubblkNumFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 subblk_num() const;
  void set_subblk_num(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:snn.SubblockInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 subblk_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 subblk_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class InitResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.InitResponse) */ {
 public:
  InitResponse();
  virtual ~InitResponse();

  InitResponse(const InitResponse& from);
  InitResponse(InitResponse&& from) noexcept
    : InitResponse() {
    *this = ::std::move(from);
  }

  inline InitResponse& operator=(const InitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitResponse& operator=(InitResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitResponse* internal_default_instance() {
    return reinterpret_cast<const InitResponse*>(
               &_InitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(InitResponse* other);
  friend void swap(InitResponse& a, InitResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InitResponse* New() const final {
    return CreateMaybeMessage<InitResponse>(nullptr);
  }

  InitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitResponse& from);
  void MergeFrom(const InitResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.InitResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .snn.SubblockInfo subblk_info = 4;
  int subblk_info_size() const;
  void clear_subblk_info();
  static const int kSubblkInfoFieldNumber = 4;
  ::snn::SubblockInfo* mutable_subblk_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snn::SubblockInfo >*
      mutable_subblk_info();
  const ::snn::SubblockInfo& subblk_info(int index) const;
  ::snn::SubblockInfo* add_subblk_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snn::SubblockInfo >&
      subblk_info() const;

  // .snn.SnnStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::snn::SnnStatus status() const;
  void set_status(::snn::SnnStatus value);

  // int32 block_id = 2;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // double used_cpu_mem = 5;
  void clear_used_cpu_mem();
  static const int kUsedCpuMemFieldNumber = 5;
  double used_cpu_mem() const;
  void set_used_cpu_mem(double value);

  // double total_gpu_mem = 6;
  void clear_total_gpu_mem();
  static const int kTotalGpuMemFieldNumber = 6;
  double total_gpu_mem() const;
  void set_total_gpu_mem(double value);

  // double used_gpu_mem = 7;
  void clear_used_gpu_mem();
  static const int kUsedGpuMemFieldNumber = 7;
  double used_gpu_mem() const;
  void set_used_gpu_mem(double value);

  // int32 neurons_per_block = 3;
  void clear_neurons_per_block();
  static const int kNeuronsPerBlockFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 neurons_per_block() const;
  void set_neurons_per_block(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:snn.InitResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snn::SubblockInfo > subblk_info_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id_;
  double used_cpu_mem_;
  double total_gpu_mem_;
  double used_gpu_mem_;
  ::PROTOBUF_NAMESPACE_ID::int32 neurons_per_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class RunRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.RunRequest) */ {
 public:
  RunRequest();
  virtual ~RunRequest();

  RunRequest(const RunRequest& from);
  RunRequest(RunRequest&& from) noexcept
    : RunRequest() {
    *this = ::std::move(from);
  }

  inline RunRequest& operator=(const RunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunRequest& operator=(RunRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunRequest* internal_default_instance() {
    return reinterpret_cast<const RunRequest*>(
               &_RunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RunRequest* other);
  friend void swap(RunRequest& a, RunRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunRequest* New() const final {
    return CreateMaybeMessage<RunRequest>(nullptr);
  }

  RunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunRequest& from);
  void MergeFrom(const RunRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.RunRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef RunRequest_Strategy Strategy;
  static constexpr Strategy STRATEGY_SEND_SEQUENTIAL =
    RunRequest_Strategy_STRATEGY_SEND_SEQUENTIAL;
  static constexpr Strategy STRATEGY_SEND_PAIRWISE =
    RunRequest_Strategy_STRATEGY_SEND_PAIRWISE;
  static constexpr Strategy STRATEGY_SEND_RANDOM =
    RunRequest_Strategy_STRATEGY_SEND_RANDOM;
  static inline bool Strategy_IsValid(int value) {
    return RunRequest_Strategy_IsValid(value);
  }
  static constexpr Strategy Strategy_MIN =
    RunRequest_Strategy_Strategy_MIN;
  static constexpr Strategy Strategy_MAX =
    RunRequest_Strategy_Strategy_MAX;
  static constexpr int Strategy_ARRAYSIZE =
    RunRequest_Strategy_Strategy_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Strategy_descriptor() {
    return RunRequest_Strategy_descriptor();
  }
  template<typename T>
  static inline const std::string& Strategy_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Strategy>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Strategy_Name.");
    return RunRequest_Strategy_Name(enum_t_value);
  }
  static inline bool Strategy_Parse(const std::string& name,
      Strategy* value) {
    return RunRequest_Strategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // int32 iter = 1;
  void clear_iter();
  static const int kIterFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 iter() const;
  void set_iter(::PROTOBUF_NAMESPACE_ID::int32 value);

  // int32 iter_offset = 2;
  void clear_iter_offset();
  static const int kIterOffsetFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 iter_offset() const;
  void set_iter_offset(::PROTOBUF_NAMESPACE_ID::int32 value);

  // bool output_freq = 3;
  void clear_output_freq();
  static const int kOutputFreqFieldNumber = 3;
  bool output_freq() const;
  void set_output_freq(bool value);

  // bool output_vmean = 4;
  void clear_output_vmean();
  static const int kOutputVmeanFieldNumber = 4;
  bool output_vmean() const;
  void set_output_vmean(bool value);

  // bool output_sample = 5;
  void clear_output_sample();
  static const int kOutputSampleFieldNumber = 5;
  bool output_sample() const;
  void set_output_sample(bool value);

  // bool output_imean = 7;
  void clear_output_imean();
  static const int kOutputImeanFieldNumber = 7;
  bool output_imean() const;
  void set_output_imean(bool value);

  // .snn.RunRequest.Strategy strategy = 6;
  void clear_strategy();
  static const int kStrategyFieldNumber = 6;
  ::snn::RunRequest_Strategy strategy() const;
  void set_strategy(::snn::RunRequest_Strategy value);

  // @@protoc_insertion_point(class_scope:snn.RunRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 iter_;
  ::PROTOBUF_NAMESPACE_ID::int32 iter_offset_;
  bool output_freq_;
  bool output_vmean_;
  bool output_sample_;
  bool output_imean_;
  int strategy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class RunResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.RunResponse) */ {
 public:
  RunResponse();
  virtual ~RunResponse();

  RunResponse(const RunResponse& from);
  RunResponse(RunResponse&& from) noexcept
    : RunResponse() {
    *this = ::std::move(from);
  }

  inline RunResponse& operator=(const RunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RunResponse& operator=(RunResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RunResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunResponse* internal_default_instance() {
    return reinterpret_cast<const RunResponse*>(
               &_RunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RunResponse* other);
  friend void swap(RunResponse& a, RunResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunResponse* New() const final {
    return CreateMaybeMessage<RunResponse>(nullptr);
  }

  RunResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RunResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RunResponse& from);
  void MergeFrom(const RunResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.RunResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes freq = 2;
  int freq_size() const;
  void clear_freq();
  static const int kFreqFieldNumber = 2;
  const std::string& freq(int index) const;
  std::string* mutable_freq(int index);
  void set_freq(int index, const std::string& value);
  void set_freq(int index, std::string&& value);
  void set_freq(int index, const char* value);
  void set_freq(int index, const void* value, size_t size);
  std::string* add_freq();
  void add_freq(const std::string& value);
  void add_freq(std::string&& value);
  void add_freq(const char* value);
  void add_freq(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& freq() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_freq();

  // repeated bytes vmean = 3;
  int vmean_size() const;
  void clear_vmean();
  static const int kVmeanFieldNumber = 3;
  const std::string& vmean(int index) const;
  std::string* mutable_vmean(int index);
  void set_vmean(int index, const std::string& value);
  void set_vmean(int index, std::string&& value);
  void set_vmean(int index, const char* value);
  void set_vmean(int index, const void* value, size_t size);
  std::string* add_vmean();
  void add_vmean(const std::string& value);
  void add_vmean(std::string&& value);
  void add_vmean(const char* value);
  void add_vmean(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vmean() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vmean();

  // repeated bytes sample_spike = 4;
  int sample_spike_size() const;
  void clear_sample_spike();
  static const int kSampleSpikeFieldNumber = 4;
  const std::string& sample_spike(int index) const;
  std::string* mutable_sample_spike(int index);
  void set_sample_spike(int index, const std::string& value);
  void set_sample_spike(int index, std::string&& value);
  void set_sample_spike(int index, const char* value);
  void set_sample_spike(int index, const void* value, size_t size);
  std::string* add_sample_spike();
  void add_sample_spike(const std::string& value);
  void add_sample_spike(std::string&& value);
  void add_sample_spike(const char* value);
  void add_sample_spike(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sample_spike() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sample_spike();

  // repeated bytes sample_vmemb = 5;
  int sample_vmemb_size() const;
  void clear_sample_vmemb();
  static const int kSampleVmembFieldNumber = 5;
  const std::string& sample_vmemb(int index) const;
  std::string* mutable_sample_vmemb(int index);
  void set_sample_vmemb(int index, const std::string& value);
  void set_sample_vmemb(int index, std::string&& value);
  void set_sample_vmemb(int index, const char* value);
  void set_sample_vmemb(int index, const void* value, size_t size);
  std::string* add_sample_vmemb();
  void add_sample_vmemb(const std::string& value);
  void add_sample_vmemb(std::string&& value);
  void add_sample_vmemb(const char* value);
  void add_sample_vmemb(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& sample_vmemb() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_sample_vmemb();

  // repeated bytes imean = 6;
  int imean_size() const;
  void clear_imean();
  static const int kImeanFieldNumber = 6;
  const std::string& imean(int index) const;
  std::string* mutable_imean(int index);
  void set_imean(int index, const std::string& value);
  void set_imean(int index, std::string&& value);
  void set_imean(int index, const char* value);
  void set_imean(int index, const void* value, size_t size);
  std::string* add_imean();
  void add_imean(const std::string& value);
  void add_imean(std::string&& value);
  void add_imean(const char* value);
  void add_imean(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& imean() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_imean();

  // .snn.SnnStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::snn::SnnStatus status() const;
  void set_status(::snn::SnnStatus value);

  // @@protoc_insertion_point(class_scope:snn.RunResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> freq_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vmean_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sample_spike_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> sample_vmemb_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> imean_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class MetricRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.MetricRequest) */ {
 public:
  MetricRequest();
  virtual ~MetricRequest();

  MetricRequest(const MetricRequest& from);
  MetricRequest(MetricRequest&& from) noexcept
    : MetricRequest() {
    *this = ::std::move(from);
  }

  inline MetricRequest& operator=(const MetricRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricRequest& operator=(MetricRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricRequest* internal_default_instance() {
    return reinterpret_cast<const MetricRequest*>(
               &_MetricRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MetricRequest* other);
  friend void swap(MetricRequest& a, MetricRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricRequest* New() const final {
    return CreateMaybeMessage<MetricRequest>(nullptr);
  }

  MetricRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricRequest& from);
  void MergeFrom(const MetricRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.MetricRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:snn.MetricRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class MetricInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.MetricInfo) */ {
 public:
  MetricInfo();
  virtual ~MetricInfo();

  MetricInfo(const MetricInfo& from);
  MetricInfo(MetricInfo&& from) noexcept
    : MetricInfo() {
    *this = ::std::move(from);
  }

  inline MetricInfo& operator=(const MetricInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricInfo& operator=(MetricInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricInfo* internal_default_instance() {
    return reinterpret_cast<const MetricInfo*>(
               &_MetricInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(MetricInfo* other);
  friend void swap(MetricInfo& a, MetricInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricInfo* New() const final {
    return CreateMaybeMessage<MetricInfo>(nullptr);
  }

  MetricInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricInfo& from);
  void MergeFrom(const MetricInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.MetricInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // double computing_duration = 2;
  void clear_computing_duration();
  static const int kComputingDurationFieldNumber = 2;
  double computing_duration() const;
  void set_computing_duration(double value);

  // double reporting_duration = 3;
  void clear_reporting_duration();
  static const int kReportingDurationFieldNumber = 3;
  double reporting_duration() const;
  void set_reporting_duration(double value);

  // double duration_inter_node = 4;
  void clear_duration_inter_node();
  static const int kDurationInterNodeFieldNumber = 4;
  double duration_inter_node() const;
  void set_duration_inter_node(double value);

  // double duration_intra_node = 5;
  void clear_duration_intra_node();
  static const int kDurationIntraNodeFieldNumber = 5;
  double duration_intra_node() const;
  void set_duration_intra_node(double value);

  // uint64 sending_byte_size_inter_node = 6;
  void clear_sending_byte_size_inter_node();
  static const int kSendingByteSizeInterNodeFieldNumber = 6;
  ::PROTOBUF_NAMESPACE_ID::uint64 sending_byte_size_inter_node() const;
  void set_sending_byte_size_inter_node(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 sending_byte_size_intra_node = 7;
  void clear_sending_byte_size_intra_node();
  static const int kSendingByteSizeIntraNodeFieldNumber = 7;
  ::PROTOBUF_NAMESPACE_ID::uint64 sending_byte_size_intra_node() const;
  void set_sending_byte_size_intra_node(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 recving_byte_size_inter_node = 8;
  void clear_recving_byte_size_inter_node();
  static const int kRecvingByteSizeInterNodeFieldNumber = 8;
  ::PROTOBUF_NAMESPACE_ID::uint64 recving_byte_size_inter_node() const;
  void set_recving_byte_size_inter_node(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 recving_byte_size_intra_node = 9;
  void clear_recving_byte_size_intra_node();
  static const int kRecvingByteSizeIntraNodeFieldNumber = 9;
  ::PROTOBUF_NAMESPACE_ID::uint64 recving_byte_size_intra_node() const;
  void set_recving_byte_size_intra_node(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:snn.MetricInfo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double computing_duration_;
  double reporting_duration_;
  double duration_inter_node_;
  double duration_intra_node_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sending_byte_size_inter_node_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sending_byte_size_intra_node_;
  ::PROTOBUF_NAMESPACE_ID::uint64 recving_byte_size_inter_node_;
  ::PROTOBUF_NAMESPACE_ID::uint64 recving_byte_size_intra_node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class MetricResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.MetricResponse) */ {
 public:
  MetricResponse();
  virtual ~MetricResponse();

  MetricResponse(const MetricResponse& from);
  MetricResponse(MetricResponse&& from) noexcept
    : MetricResponse() {
    *this = ::std::move(from);
  }

  inline MetricResponse& operator=(const MetricResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricResponse& operator=(MetricResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricResponse* internal_default_instance() {
    return reinterpret_cast<const MetricResponse*>(
               &_MetricResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MetricResponse* other);
  friend void swap(MetricResponse& a, MetricResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MetricResponse* New() const final {
    return CreateMaybeMessage<MetricResponse>(nullptr);
  }

  MetricResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricResponse& from);
  void MergeFrom(const MetricResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.MetricResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .snn.MetricInfo metric = 2;
  int metric_size() const;
  void clear_metric();
  static const int kMetricFieldNumber = 2;
  ::snn::MetricInfo* mutable_metric(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snn::MetricInfo >*
      mutable_metric();
  const ::snn::MetricInfo& metric(int index) const;
  ::snn::MetricInfo* add_metric();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snn::MetricInfo >&
      metric() const;

  // .snn.SnnStatus status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::snn::SnnStatus status() const;
  void set_status(::snn::SnnStatus value);

  // @@protoc_insertion_point(class_scope:snn.MetricResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snn::MetricInfo > metric_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class UpdatePropRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.UpdatePropRequest) */ {
 public:
  UpdatePropRequest();
  virtual ~UpdatePropRequest();

  UpdatePropRequest(const UpdatePropRequest& from);
  UpdatePropRequest(UpdatePropRequest&& from) noexcept
    : UpdatePropRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePropRequest& operator=(const UpdatePropRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePropRequest& operator=(UpdatePropRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePropRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePropRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePropRequest*>(
               &_UpdatePropRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(UpdatePropRequest* other);
  friend void swap(UpdatePropRequest& a, UpdatePropRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdatePropRequest* New() const final {
    return CreateMaybeMessage<UpdatePropRequest>(nullptr);
  }

  UpdatePropRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePropRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePropRequest& from);
  void MergeFrom(const UpdatePropRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePropRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.UpdatePropRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 neuron_id = 2;
  int neuron_id_size() const;
  void clear_neuron_id();
  static const int kNeuronIdFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 neuron_id(int index) const;
  void set_neuron_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_neuron_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      neuron_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_neuron_id();

  // repeated .snn.PropType prop_id = 3;
  int prop_id_size() const;
  void clear_prop_id();
  static const int kPropIdFieldNumber = 3;
  ::snn::PropType prop_id(int index) const;
  void set_prop_id(int index, ::snn::PropType value);
  void add_prop_id(::snn::PropType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& prop_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_prop_id();

  // repeated float prop_val = 4;
  int prop_val_size() const;
  void clear_prop_val();
  static const int kPropValFieldNumber = 4;
  float prop_val(int index) const;
  void set_prop_val(int index, float value);
  void add_prop_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      prop_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_prop_val();

  // int32 block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:snn.UpdatePropRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > neuron_id_;
  mutable std::atomic<int> _neuron_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> prop_id_;
  mutable std::atomic<int> _prop_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > prop_val_;
  mutable std::atomic<int> _prop_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class UpdatePropResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.UpdatePropResponse) */ {
 public:
  UpdatePropResponse();
  virtual ~UpdatePropResponse();

  UpdatePropResponse(const UpdatePropResponse& from);
  UpdatePropResponse(UpdatePropResponse&& from) noexcept
    : UpdatePropResponse() {
    *this = ::std::move(from);
  }

  inline UpdatePropResponse& operator=(const UpdatePropResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePropResponse& operator=(UpdatePropResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePropResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePropResponse* internal_default_instance() {
    return reinterpret_cast<const UpdatePropResponse*>(
               &_UpdatePropResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(UpdatePropResponse* other);
  friend void swap(UpdatePropResponse& a, UpdatePropResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdatePropResponse* New() const final {
    return CreateMaybeMessage<UpdatePropResponse>(nullptr);
  }

  UpdatePropResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePropResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePropResponse& from);
  void MergeFrom(const UpdatePropResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePropResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.UpdatePropResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:snn.UpdatePropResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class UpdateGammaRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.UpdateGammaRequest) */ {
 public:
  UpdateGammaRequest();
  virtual ~UpdateGammaRequest();

  UpdateGammaRequest(const UpdateGammaRequest& from);
  UpdateGammaRequest(UpdateGammaRequest&& from) noexcept
    : UpdateGammaRequest() {
    *this = ::std::move(from);
  }

  inline UpdateGammaRequest& operator=(const UpdateGammaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGammaRequest& operator=(UpdateGammaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateGammaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGammaRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateGammaRequest*>(
               &_UpdateGammaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(UpdateGammaRequest* other);
  friend void swap(UpdateGammaRequest& a, UpdateGammaRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateGammaRequest* New() const final {
    return CreateMaybeMessage<UpdateGammaRequest>(nullptr);
  }

  UpdateGammaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGammaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateGammaRequest& from);
  void MergeFrom(const UpdateGammaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGammaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.UpdateGammaRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .snn.PropType prop_id = 2;
  int prop_id_size() const;
  void clear_prop_id();
  static const int kPropIdFieldNumber = 2;
  ::snn::PropType prop_id(int index) const;
  void set_prop_id(int index, ::snn::PropType value);
  void add_prop_id(::snn::PropType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& prop_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_prop_id();

  // repeated int32 brain_id = 3;
  int brain_id_size() const;
  void clear_brain_id();
  static const int kBrainIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 brain_id(int index) const;
  void set_brain_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_brain_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      brain_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_brain_id();

  // repeated float gamma_concentration = 4;
  int gamma_concentration_size() const;
  void clear_gamma_concentration();
  static const int kGammaConcentrationFieldNumber = 4;
  float gamma_concentration(int index) const;
  void set_gamma_concentration(int index, float value);
  void add_gamma_concentration(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gamma_concentration() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gamma_concentration();

  // repeated float gamma_rate = 5;
  int gamma_rate_size() const;
  void clear_gamma_rate();
  static const int kGammaRateFieldNumber = 5;
  float gamma_rate(int index) const;
  void set_gamma_rate(int index, float value);
  void add_gamma_rate(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      gamma_rate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_gamma_rate();

  // int32 block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:snn.UpdateGammaRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> prop_id_;
  mutable std::atomic<int> _prop_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > brain_id_;
  mutable std::atomic<int> _brain_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gamma_concentration_;
  mutable std::atomic<int> _gamma_concentration_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > gamma_rate_;
  mutable std::atomic<int> _gamma_rate_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class UpdateGammaResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.UpdateGammaResponse) */ {
 public:
  UpdateGammaResponse();
  virtual ~UpdateGammaResponse();

  UpdateGammaResponse(const UpdateGammaResponse& from);
  UpdateGammaResponse(UpdateGammaResponse&& from) noexcept
    : UpdateGammaResponse() {
    *this = ::std::move(from);
  }

  inline UpdateGammaResponse& operator=(const UpdateGammaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGammaResponse& operator=(UpdateGammaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateGammaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGammaResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateGammaResponse*>(
               &_UpdateGammaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(UpdateGammaResponse* other);
  friend void swap(UpdateGammaResponse& a, UpdateGammaResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateGammaResponse* New() const final {
    return CreateMaybeMessage<UpdateGammaResponse>(nullptr);
  }

  UpdateGammaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGammaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateGammaResponse& from);
  void MergeFrom(const UpdateGammaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGammaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.UpdateGammaResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:snn.UpdateGammaResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class UpdateGammaWithResultResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.UpdateGammaWithResultResponse) */ {
 public:
  UpdateGammaWithResultResponse();
  virtual ~UpdateGammaWithResultResponse();

  UpdateGammaWithResultResponse(const UpdateGammaWithResultResponse& from);
  UpdateGammaWithResultResponse(UpdateGammaWithResultResponse&& from) noexcept
    : UpdateGammaWithResultResponse() {
    *this = ::std::move(from);
  }

  inline UpdateGammaWithResultResponse& operator=(const UpdateGammaWithResultResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateGammaWithResultResponse& operator=(UpdateGammaWithResultResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateGammaWithResultResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateGammaWithResultResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateGammaWithResultResponse*>(
               &_UpdateGammaWithResultResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(UpdateGammaWithResultResponse* other);
  friend void swap(UpdateGammaWithResultResponse& a, UpdateGammaWithResultResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateGammaWithResultResponse* New() const final {
    return CreateMaybeMessage<UpdateGammaWithResultResponse>(nullptr);
  }

  UpdateGammaWithResultResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateGammaWithResultResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateGammaWithResultResponse& from);
  void MergeFrom(const UpdateGammaWithResultResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateGammaWithResultResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.UpdateGammaWithResultResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes prop_val = 4;
  int prop_val_size() const;
  void clear_prop_val();
  static const int kPropValFieldNumber = 4;
  const std::string& prop_val(int index) const;
  std::string* mutable_prop_val(int index);
  void set_prop_val(int index, const std::string& value);
  void set_prop_val(int index, std::string&& value);
  void set_prop_val(int index, const char* value);
  void set_prop_val(int index, const void* value, size_t size);
  std::string* add_prop_val();
  void add_prop_val(const std::string& value);
  void add_prop_val(std::string&& value);
  void add_prop_val(const char* value);
  void add_prop_val(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& prop_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_prop_val();

  // int32 block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .snn.PropType prop_id = 2;
  void clear_prop_id();
  static const int kPropIdFieldNumber = 2;
  ::snn::PropType prop_id() const;
  void set_prop_id(::snn::PropType value);

  // int32 brain_id = 3;
  void clear_brain_id();
  static const int kBrainIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 brain_id() const;
  void set_brain_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:snn.UpdateGammaWithResultResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> prop_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id_;
  int prop_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 brain_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class UpdateHyperParaRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.UpdateHyperParaRequest) */ {
 public:
  UpdateHyperParaRequest();
  virtual ~UpdateHyperParaRequest();

  UpdateHyperParaRequest(const UpdateHyperParaRequest& from);
  UpdateHyperParaRequest(UpdateHyperParaRequest&& from) noexcept
    : UpdateHyperParaRequest() {
    *this = ::std::move(from);
  }

  inline UpdateHyperParaRequest& operator=(const UpdateHyperParaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateHyperParaRequest& operator=(UpdateHyperParaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateHyperParaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateHyperParaRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateHyperParaRequest*>(
               &_UpdateHyperParaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(UpdateHyperParaRequest* other);
  friend void swap(UpdateHyperParaRequest& a, UpdateHyperParaRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateHyperParaRequest* New() const final {
    return CreateMaybeMessage<UpdateHyperParaRequest>(nullptr);
  }

  UpdateHyperParaRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateHyperParaRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateHyperParaRequest& from);
  void MergeFrom(const UpdateHyperParaRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateHyperParaRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.UpdateHyperParaRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .snn.PropType prop_id = 2;
  int prop_id_size() const;
  void clear_prop_id();
  static const int kPropIdFieldNumber = 2;
  ::snn::PropType prop_id(int index) const;
  void set_prop_id(int index, ::snn::PropType value);
  void add_prop_id(::snn::PropType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& prop_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_prop_id();

  // repeated int32 brain_id = 3;
  int brain_id_size() const;
  void clear_brain_id();
  static const int kBrainIdFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 brain_id(int index) const;
  void set_brain_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_brain_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      brain_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_brain_id();

  // repeated float hpara_val = 4;
  int hpara_val_size() const;
  void clear_hpara_val();
  static const int kHparaValFieldNumber = 4;
  float hpara_val(int index) const;
  void set_hpara_val(int index, float value);
  void add_hpara_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      hpara_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_hpara_val();

  // int32 block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:snn.UpdateHyperParaRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> prop_id_;
  mutable std::atomic<int> _prop_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > brain_id_;
  mutable std::atomic<int> _brain_id_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > hpara_val_;
  mutable std::atomic<int> _hpara_val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class UpdateHyperParaResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.UpdateHyperParaResponse) */ {
 public:
  UpdateHyperParaResponse();
  virtual ~UpdateHyperParaResponse();

  UpdateHyperParaResponse(const UpdateHyperParaResponse& from);
  UpdateHyperParaResponse(UpdateHyperParaResponse&& from) noexcept
    : UpdateHyperParaResponse() {
    *this = ::std::move(from);
  }

  inline UpdateHyperParaResponse& operator=(const UpdateHyperParaResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateHyperParaResponse& operator=(UpdateHyperParaResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateHyperParaResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateHyperParaResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateHyperParaResponse*>(
               &_UpdateHyperParaResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(UpdateHyperParaResponse* other);
  friend void swap(UpdateHyperParaResponse& a, UpdateHyperParaResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateHyperParaResponse* New() const final {
    return CreateMaybeMessage<UpdateHyperParaResponse>(nullptr);
  }

  UpdateHyperParaResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateHyperParaResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateHyperParaResponse& from);
  void MergeFrom(const UpdateHyperParaResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateHyperParaResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.UpdateHyperParaResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:snn.UpdateHyperParaResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class UpdateSampleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.UpdateSampleRequest) */ {
 public:
  UpdateSampleRequest();
  virtual ~UpdateSampleRequest();

  UpdateSampleRequest(const UpdateSampleRequest& from);
  UpdateSampleRequest(UpdateSampleRequest&& from) noexcept
    : UpdateSampleRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSampleRequest& operator=(const UpdateSampleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSampleRequest& operator=(UpdateSampleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSampleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSampleRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSampleRequest*>(
               &_UpdateSampleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(UpdateSampleRequest* other);
  friend void swap(UpdateSampleRequest& a, UpdateSampleRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSampleRequest* New() const final {
    return CreateMaybeMessage<UpdateSampleRequest>(nullptr);
  }

  UpdateSampleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSampleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSampleRequest& from);
  void MergeFrom(const UpdateSampleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSampleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.UpdateSampleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 sample_idx = 2;
  int sample_idx_size() const;
  void clear_sample_idx();
  static const int kSampleIdxFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 sample_idx(int index) const;
  void set_sample_idx(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_sample_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      sample_idx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_sample_idx();

  // int32 block_id = 1;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id() const;
  void set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:snn.UpdateSampleRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > sample_idx_;
  mutable std::atomic<int> _sample_idx_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class UpdateSampleResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.UpdateSampleResponse) */ {
 public:
  UpdateSampleResponse();
  virtual ~UpdateSampleResponse();

  UpdateSampleResponse(const UpdateSampleResponse& from);
  UpdateSampleResponse(UpdateSampleResponse&& from) noexcept
    : UpdateSampleResponse() {
    *this = ::std::move(from);
  }

  inline UpdateSampleResponse& operator=(const UpdateSampleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSampleResponse& operator=(UpdateSampleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSampleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSampleResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateSampleResponse*>(
               &_UpdateSampleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(UpdateSampleResponse* other);
  friend void swap(UpdateSampleResponse& a, UpdateSampleResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSampleResponse* New() const final {
    return CreateMaybeMessage<UpdateSampleResponse>(nullptr);
  }

  UpdateSampleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSampleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSampleResponse& from);
  void MergeFrom(const UpdateSampleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSampleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.UpdateSampleResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:snn.UpdateSampleResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class ShutdownRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.ShutdownRequest) */ {
 public:
  ShutdownRequest();
  virtual ~ShutdownRequest();

  ShutdownRequest(const ShutdownRequest& from);
  ShutdownRequest(ShutdownRequest&& from) noexcept
    : ShutdownRequest() {
    *this = ::std::move(from);
  }

  inline ShutdownRequest& operator=(const ShutdownRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownRequest& operator=(ShutdownRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShutdownRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShutdownRequest* internal_default_instance() {
    return reinterpret_cast<const ShutdownRequest*>(
               &_ShutdownRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(ShutdownRequest* other);
  friend void swap(ShutdownRequest& a, ShutdownRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShutdownRequest* New() const final {
    return CreateMaybeMessage<ShutdownRequest>(nullptr);
  }

  ShutdownRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutdownRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShutdownRequest& from);
  void MergeFrom(const ShutdownRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.ShutdownRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:snn.ShutdownRequest)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// -------------------------------------------------------------------

class ShutdownResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:snn.ShutdownResponse) */ {
 public:
  ShutdownResponse();
  virtual ~ShutdownResponse();

  ShutdownResponse(const ShutdownResponse& from);
  ShutdownResponse(ShutdownResponse&& from) noexcept
    : ShutdownResponse() {
    *this = ::std::move(from);
  }

  inline ShutdownResponse& operator=(const ShutdownResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShutdownResponse& operator=(ShutdownResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShutdownResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShutdownResponse* internal_default_instance() {
    return reinterpret_cast<const ShutdownResponse*>(
               &_ShutdownResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ShutdownResponse* other);
  friend void swap(ShutdownResponse& a, ShutdownResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShutdownResponse* New() const final {
    return CreateMaybeMessage<ShutdownResponse>(nullptr);
  }

  ShutdownResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShutdownResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShutdownResponse& from);
  void MergeFrom(const ShutdownResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShutdownResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "snn.ShutdownResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_snn_2eproto);
    return ::descriptor_table_snn_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool shutdown = 1;
  void clear_shutdown();
  static const int kShutdownFieldNumber = 1;
  bool shutdown() const;
  void set_shutdown(bool value);

  // @@protoc_insertion_point(class_scope:snn.ShutdownResponse)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool shutdown_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_snn_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InitRequest

// string file_path = 1;
inline void InitRequest::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InitRequest::file_path() const {
  // @@protoc_insertion_point(field_get:snn.InitRequest.file_path)
  return file_path_.GetNoArena();
}
inline void InitRequest::set_file_path(const std::string& value) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snn.InitRequest.file_path)
}
inline void InitRequest::set_file_path(std::string&& value) {
  
  file_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:snn.InitRequest.file_path)
}
inline void InitRequest::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snn.InitRequest.file_path)
}
inline void InitRequest::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snn.InitRequest.file_path)
}
inline std::string* InitRequest::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:snn.InitRequest.file_path)
  return file_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InitRequest::release_file_path() {
  // @@protoc_insertion_point(field_release:snn.InitRequest.file_path)
  
  return file_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InitRequest::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:snn.InitRequest.file_path)
}

// string route_path = 2;
inline void InitRequest::clear_route_path() {
  route_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InitRequest::route_path() const {
  // @@protoc_insertion_point(field_get:snn.InitRequest.route_path)
  return route_path_.GetNoArena();
}
inline void InitRequest::set_route_path(const std::string& value) {
  
  route_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snn.InitRequest.route_path)
}
inline void InitRequest::set_route_path(std::string&& value) {
  
  route_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:snn.InitRequest.route_path)
}
inline void InitRequest::set_route_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  route_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snn.InitRequest.route_path)
}
inline void InitRequest::set_route_path(const char* value, size_t size) {
  
  route_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snn.InitRequest.route_path)
}
inline std::string* InitRequest::mutable_route_path() {
  
  // @@protoc_insertion_point(field_mutable:snn.InitRequest.route_path)
  return route_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InitRequest::release_route_path() {
  // @@protoc_insertion_point(field_release:snn.InitRequest.route_path)
  
  return route_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InitRequest::set_allocated_route_path(std::string* route_path) {
  if (route_path != nullptr) {
    
  } else {
    
  }
  route_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), route_path);
  // @@protoc_insertion_point(field_set_allocated:snn.InitRequest.route_path)
}

// float delta_t = 3;
inline void InitRequest::clear_delta_t() {
  delta_t_ = 0;
}
inline float InitRequest::delta_t() const {
  // @@protoc_insertion_point(field_get:snn.InitRequest.delta_t)
  return delta_t_;
}
inline void InitRequest::set_delta_t(float value) {
  
  delta_t_ = value;
  // @@protoc_insertion_point(field_set:snn.InitRequest.delta_t)
}

// .snn.InitRequest.CommMode mode = 4;
inline void InitRequest::clear_mode() {
  mode_ = 0;
}
inline ::snn::InitRequest_CommMode InitRequest::mode() const {
  // @@protoc_insertion_point(field_get:snn.InitRequest.mode)
  return static_cast< ::snn::InitRequest_CommMode >(mode_);
}
inline void InitRequest::set_mode(::snn::InitRequest_CommMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:snn.InitRequest.mode)
}

// -------------------------------------------------------------------

// SubblockInfo

// int32 subblk_id = 1;
inline void SubblockInfo::clear_subblk_id() {
  subblk_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubblockInfo::subblk_id() const {
  // @@protoc_insertion_point(field_get:snn.SubblockInfo.subblk_id)
  return subblk_id_;
}
inline void SubblockInfo::set_subblk_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subblk_id_ = value;
  // @@protoc_insertion_point(field_set:snn.SubblockInfo.subblk_id)
}

// int32 subblk_num = 2;
inline void SubblockInfo::clear_subblk_num() {
  subblk_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SubblockInfo::subblk_num() const {
  // @@protoc_insertion_point(field_get:snn.SubblockInfo.subblk_num)
  return subblk_num_;
}
inline void SubblockInfo::set_subblk_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  subblk_num_ = value;
  // @@protoc_insertion_point(field_set:snn.SubblockInfo.subblk_num)
}

// -------------------------------------------------------------------

// InitResponse

// .snn.SnnStatus status = 1;
inline void InitResponse::clear_status() {
  status_ = 0;
}
inline ::snn::SnnStatus InitResponse::status() const {
  // @@protoc_insertion_point(field_get:snn.InitResponse.status)
  return static_cast< ::snn::SnnStatus >(status_);
}
inline void InitResponse::set_status(::snn::SnnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:snn.InitResponse.status)
}

// int32 block_id = 2;
inline void InitResponse::clear_block_id() {
  block_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitResponse::block_id() const {
  // @@protoc_insertion_point(field_get:snn.InitResponse.block_id)
  return block_id_;
}
inline void InitResponse::set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:snn.InitResponse.block_id)
}

// int32 neurons_per_block = 3;
inline void InitResponse::clear_neurons_per_block() {
  neurons_per_block_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InitResponse::neurons_per_block() const {
  // @@protoc_insertion_point(field_get:snn.InitResponse.neurons_per_block)
  return neurons_per_block_;
}
inline void InitResponse::set_neurons_per_block(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  neurons_per_block_ = value;
  // @@protoc_insertion_point(field_set:snn.InitResponse.neurons_per_block)
}

// repeated .snn.SubblockInfo subblk_info = 4;
inline int InitResponse::subblk_info_size() const {
  return subblk_info_.size();
}
inline void InitResponse::clear_subblk_info() {
  subblk_info_.Clear();
}
inline ::snn::SubblockInfo* InitResponse::mutable_subblk_info(int index) {
  // @@protoc_insertion_point(field_mutable:snn.InitResponse.subblk_info)
  return subblk_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snn::SubblockInfo >*
InitResponse::mutable_subblk_info() {
  // @@protoc_insertion_point(field_mutable_list:snn.InitResponse.subblk_info)
  return &subblk_info_;
}
inline const ::snn::SubblockInfo& InitResponse::subblk_info(int index) const {
  // @@protoc_insertion_point(field_get:snn.InitResponse.subblk_info)
  return subblk_info_.Get(index);
}
inline ::snn::SubblockInfo* InitResponse::add_subblk_info() {
  // @@protoc_insertion_point(field_add:snn.InitResponse.subblk_info)
  return subblk_info_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snn::SubblockInfo >&
InitResponse::subblk_info() const {
  // @@protoc_insertion_point(field_list:snn.InitResponse.subblk_info)
  return subblk_info_;
}

// double used_cpu_mem = 5;
inline void InitResponse::clear_used_cpu_mem() {
  used_cpu_mem_ = 0;
}
inline double InitResponse::used_cpu_mem() const {
  // @@protoc_insertion_point(field_get:snn.InitResponse.used_cpu_mem)
  return used_cpu_mem_;
}
inline void InitResponse::set_used_cpu_mem(double value) {
  
  used_cpu_mem_ = value;
  // @@protoc_insertion_point(field_set:snn.InitResponse.used_cpu_mem)
}

// double total_gpu_mem = 6;
inline void InitResponse::clear_total_gpu_mem() {
  total_gpu_mem_ = 0;
}
inline double InitResponse::total_gpu_mem() const {
  // @@protoc_insertion_point(field_get:snn.InitResponse.total_gpu_mem)
  return total_gpu_mem_;
}
inline void InitResponse::set_total_gpu_mem(double value) {
  
  total_gpu_mem_ = value;
  // @@protoc_insertion_point(field_set:snn.InitResponse.total_gpu_mem)
}

// double used_gpu_mem = 7;
inline void InitResponse::clear_used_gpu_mem() {
  used_gpu_mem_ = 0;
}
inline double InitResponse::used_gpu_mem() const {
  // @@protoc_insertion_point(field_get:snn.InitResponse.used_gpu_mem)
  return used_gpu_mem_;
}
inline void InitResponse::set_used_gpu_mem(double value) {
  
  used_gpu_mem_ = value;
  // @@protoc_insertion_point(field_set:snn.InitResponse.used_gpu_mem)
}

// -------------------------------------------------------------------

// RunRequest

// int32 iter = 1;
inline void RunRequest::clear_iter() {
  iter_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunRequest::iter() const {
  // @@protoc_insertion_point(field_get:snn.RunRequest.iter)
  return iter_;
}
inline void RunRequest::set_iter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iter_ = value;
  // @@protoc_insertion_point(field_set:snn.RunRequest.iter)
}

// int32 iter_offset = 2;
inline void RunRequest::clear_iter_offset() {
  iter_offset_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RunRequest::iter_offset() const {
  // @@protoc_insertion_point(field_get:snn.RunRequest.iter_offset)
  return iter_offset_;
}
inline void RunRequest::set_iter_offset(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iter_offset_ = value;
  // @@protoc_insertion_point(field_set:snn.RunRequest.iter_offset)
}

// bool output_freq = 3;
inline void RunRequest::clear_output_freq() {
  output_freq_ = false;
}
inline bool RunRequest::output_freq() const {
  // @@protoc_insertion_point(field_get:snn.RunRequest.output_freq)
  return output_freq_;
}
inline void RunRequest::set_output_freq(bool value) {
  
  output_freq_ = value;
  // @@protoc_insertion_point(field_set:snn.RunRequest.output_freq)
}

// bool output_vmean = 4;
inline void RunRequest::clear_output_vmean() {
  output_vmean_ = false;
}
inline bool RunRequest::output_vmean() const {
  // @@protoc_insertion_point(field_get:snn.RunRequest.output_vmean)
  return output_vmean_;
}
inline void RunRequest::set_output_vmean(bool value) {
  
  output_vmean_ = value;
  // @@protoc_insertion_point(field_set:snn.RunRequest.output_vmean)
}

// bool output_sample = 5;
inline void RunRequest::clear_output_sample() {
  output_sample_ = false;
}
inline bool RunRequest::output_sample() const {
  // @@protoc_insertion_point(field_get:snn.RunRequest.output_sample)
  return output_sample_;
}
inline void RunRequest::set_output_sample(bool value) {
  
  output_sample_ = value;
  // @@protoc_insertion_point(field_set:snn.RunRequest.output_sample)
}

// .snn.RunRequest.Strategy strategy = 6;
inline void RunRequest::clear_strategy() {
  strategy_ = 0;
}
inline ::snn::RunRequest_Strategy RunRequest::strategy() const {
  // @@protoc_insertion_point(field_get:snn.RunRequest.strategy)
  return static_cast< ::snn::RunRequest_Strategy >(strategy_);
}
inline void RunRequest::set_strategy(::snn::RunRequest_Strategy value) {
  
  strategy_ = value;
  // @@protoc_insertion_point(field_set:snn.RunRequest.strategy)
}

// bool output_imean = 7;
inline void RunRequest::clear_output_imean() {
  output_imean_ = false;
}
inline bool RunRequest::output_imean() const {
  // @@protoc_insertion_point(field_get:snn.RunRequest.output_imean)
  return output_imean_;
}
inline void RunRequest::set_output_imean(bool value) {
  
  output_imean_ = value;
  // @@protoc_insertion_point(field_set:snn.RunRequest.output_imean)
}

// -------------------------------------------------------------------

// RunResponse

// .snn.SnnStatus status = 1;
inline void RunResponse::clear_status() {
  status_ = 0;
}
inline ::snn::SnnStatus RunResponse::status() const {
  // @@protoc_insertion_point(field_get:snn.RunResponse.status)
  return static_cast< ::snn::SnnStatus >(status_);
}
inline void RunResponse::set_status(::snn::SnnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:snn.RunResponse.status)
}

// repeated bytes freq = 2;
inline int RunResponse::freq_size() const {
  return freq_.size();
}
inline void RunResponse::clear_freq() {
  freq_.Clear();
}
inline const std::string& RunResponse::freq(int index) const {
  // @@protoc_insertion_point(field_get:snn.RunResponse.freq)
  return freq_.Get(index);
}
inline std::string* RunResponse::mutable_freq(int index) {
  // @@protoc_insertion_point(field_mutable:snn.RunResponse.freq)
  return freq_.Mutable(index);
}
inline void RunResponse::set_freq(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:snn.RunResponse.freq)
  freq_.Mutable(index)->assign(value);
}
inline void RunResponse::set_freq(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:snn.RunResponse.freq)
  freq_.Mutable(index)->assign(std::move(value));
}
inline void RunResponse::set_freq(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  freq_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:snn.RunResponse.freq)
}
inline void RunResponse::set_freq(int index, const void* value, size_t size) {
  freq_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:snn.RunResponse.freq)
}
inline std::string* RunResponse::add_freq() {
  // @@protoc_insertion_point(field_add_mutable:snn.RunResponse.freq)
  return freq_.Add();
}
inline void RunResponse::add_freq(const std::string& value) {
  freq_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:snn.RunResponse.freq)
}
inline void RunResponse::add_freq(std::string&& value) {
  freq_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:snn.RunResponse.freq)
}
inline void RunResponse::add_freq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  freq_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:snn.RunResponse.freq)
}
inline void RunResponse::add_freq(const void* value, size_t size) {
  freq_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:snn.RunResponse.freq)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RunResponse::freq() const {
  // @@protoc_insertion_point(field_list:snn.RunResponse.freq)
  return freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RunResponse::mutable_freq() {
  // @@protoc_insertion_point(field_mutable_list:snn.RunResponse.freq)
  return &freq_;
}

// repeated bytes vmean = 3;
inline int RunResponse::vmean_size() const {
  return vmean_.size();
}
inline void RunResponse::clear_vmean() {
  vmean_.Clear();
}
inline const std::string& RunResponse::vmean(int index) const {
  // @@protoc_insertion_point(field_get:snn.RunResponse.vmean)
  return vmean_.Get(index);
}
inline std::string* RunResponse::mutable_vmean(int index) {
  // @@protoc_insertion_point(field_mutable:snn.RunResponse.vmean)
  return vmean_.Mutable(index);
}
inline void RunResponse::set_vmean(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:snn.RunResponse.vmean)
  vmean_.Mutable(index)->assign(value);
}
inline void RunResponse::set_vmean(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:snn.RunResponse.vmean)
  vmean_.Mutable(index)->assign(std::move(value));
}
inline void RunResponse::set_vmean(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vmean_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:snn.RunResponse.vmean)
}
inline void RunResponse::set_vmean(int index, const void* value, size_t size) {
  vmean_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:snn.RunResponse.vmean)
}
inline std::string* RunResponse::add_vmean() {
  // @@protoc_insertion_point(field_add_mutable:snn.RunResponse.vmean)
  return vmean_.Add();
}
inline void RunResponse::add_vmean(const std::string& value) {
  vmean_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:snn.RunResponse.vmean)
}
inline void RunResponse::add_vmean(std::string&& value) {
  vmean_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:snn.RunResponse.vmean)
}
inline void RunResponse::add_vmean(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vmean_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:snn.RunResponse.vmean)
}
inline void RunResponse::add_vmean(const void* value, size_t size) {
  vmean_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:snn.RunResponse.vmean)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RunResponse::vmean() const {
  // @@protoc_insertion_point(field_list:snn.RunResponse.vmean)
  return vmean_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RunResponse::mutable_vmean() {
  // @@protoc_insertion_point(field_mutable_list:snn.RunResponse.vmean)
  return &vmean_;
}

// repeated bytes sample_spike = 4;
inline int RunResponse::sample_spike_size() const {
  return sample_spike_.size();
}
inline void RunResponse::clear_sample_spike() {
  sample_spike_.Clear();
}
inline const std::string& RunResponse::sample_spike(int index) const {
  // @@protoc_insertion_point(field_get:snn.RunResponse.sample_spike)
  return sample_spike_.Get(index);
}
inline std::string* RunResponse::mutable_sample_spike(int index) {
  // @@protoc_insertion_point(field_mutable:snn.RunResponse.sample_spike)
  return sample_spike_.Mutable(index);
}
inline void RunResponse::set_sample_spike(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:snn.RunResponse.sample_spike)
  sample_spike_.Mutable(index)->assign(value);
}
inline void RunResponse::set_sample_spike(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:snn.RunResponse.sample_spike)
  sample_spike_.Mutable(index)->assign(std::move(value));
}
inline void RunResponse::set_sample_spike(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sample_spike_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:snn.RunResponse.sample_spike)
}
inline void RunResponse::set_sample_spike(int index, const void* value, size_t size) {
  sample_spike_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:snn.RunResponse.sample_spike)
}
inline std::string* RunResponse::add_sample_spike() {
  // @@protoc_insertion_point(field_add_mutable:snn.RunResponse.sample_spike)
  return sample_spike_.Add();
}
inline void RunResponse::add_sample_spike(const std::string& value) {
  sample_spike_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:snn.RunResponse.sample_spike)
}
inline void RunResponse::add_sample_spike(std::string&& value) {
  sample_spike_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:snn.RunResponse.sample_spike)
}
inline void RunResponse::add_sample_spike(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sample_spike_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:snn.RunResponse.sample_spike)
}
inline void RunResponse::add_sample_spike(const void* value, size_t size) {
  sample_spike_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:snn.RunResponse.sample_spike)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RunResponse::sample_spike() const {
  // @@protoc_insertion_point(field_list:snn.RunResponse.sample_spike)
  return sample_spike_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RunResponse::mutable_sample_spike() {
  // @@protoc_insertion_point(field_mutable_list:snn.RunResponse.sample_spike)
  return &sample_spike_;
}

// repeated bytes sample_vmemb = 5;
inline int RunResponse::sample_vmemb_size() const {
  return sample_vmemb_.size();
}
inline void RunResponse::clear_sample_vmemb() {
  sample_vmemb_.Clear();
}
inline const std::string& RunResponse::sample_vmemb(int index) const {
  // @@protoc_insertion_point(field_get:snn.RunResponse.sample_vmemb)
  return sample_vmemb_.Get(index);
}
inline std::string* RunResponse::mutable_sample_vmemb(int index) {
  // @@protoc_insertion_point(field_mutable:snn.RunResponse.sample_vmemb)
  return sample_vmemb_.Mutable(index);
}
inline void RunResponse::set_sample_vmemb(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:snn.RunResponse.sample_vmemb)
  sample_vmemb_.Mutable(index)->assign(value);
}
inline void RunResponse::set_sample_vmemb(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:snn.RunResponse.sample_vmemb)
  sample_vmemb_.Mutable(index)->assign(std::move(value));
}
inline void RunResponse::set_sample_vmemb(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sample_vmemb_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:snn.RunResponse.sample_vmemb)
}
inline void RunResponse::set_sample_vmemb(int index, const void* value, size_t size) {
  sample_vmemb_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:snn.RunResponse.sample_vmemb)
}
inline std::string* RunResponse::add_sample_vmemb() {
  // @@protoc_insertion_point(field_add_mutable:snn.RunResponse.sample_vmemb)
  return sample_vmemb_.Add();
}
inline void RunResponse::add_sample_vmemb(const std::string& value) {
  sample_vmemb_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:snn.RunResponse.sample_vmemb)
}
inline void RunResponse::add_sample_vmemb(std::string&& value) {
  sample_vmemb_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:snn.RunResponse.sample_vmemb)
}
inline void RunResponse::add_sample_vmemb(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  sample_vmemb_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:snn.RunResponse.sample_vmemb)
}
inline void RunResponse::add_sample_vmemb(const void* value, size_t size) {
  sample_vmemb_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:snn.RunResponse.sample_vmemb)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RunResponse::sample_vmemb() const {
  // @@protoc_insertion_point(field_list:snn.RunResponse.sample_vmemb)
  return sample_vmemb_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RunResponse::mutable_sample_vmemb() {
  // @@protoc_insertion_point(field_mutable_list:snn.RunResponse.sample_vmemb)
  return &sample_vmemb_;
}

// repeated bytes imean = 6;
inline int RunResponse::imean_size() const {
  return imean_.size();
}
inline void RunResponse::clear_imean() {
  imean_.Clear();
}
inline const std::string& RunResponse::imean(int index) const {
  // @@protoc_insertion_point(field_get:snn.RunResponse.imean)
  return imean_.Get(index);
}
inline std::string* RunResponse::mutable_imean(int index) {
  // @@protoc_insertion_point(field_mutable:snn.RunResponse.imean)
  return imean_.Mutable(index);
}
inline void RunResponse::set_imean(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:snn.RunResponse.imean)
  imean_.Mutable(index)->assign(value);
}
inline void RunResponse::set_imean(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:snn.RunResponse.imean)
  imean_.Mutable(index)->assign(std::move(value));
}
inline void RunResponse::set_imean(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  imean_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:snn.RunResponse.imean)
}
inline void RunResponse::set_imean(int index, const void* value, size_t size) {
  imean_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:snn.RunResponse.imean)
}
inline std::string* RunResponse::add_imean() {
  // @@protoc_insertion_point(field_add_mutable:snn.RunResponse.imean)
  return imean_.Add();
}
inline void RunResponse::add_imean(const std::string& value) {
  imean_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:snn.RunResponse.imean)
}
inline void RunResponse::add_imean(std::string&& value) {
  imean_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:snn.RunResponse.imean)
}
inline void RunResponse::add_imean(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  imean_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:snn.RunResponse.imean)
}
inline void RunResponse::add_imean(const void* value, size_t size) {
  imean_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:snn.RunResponse.imean)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RunResponse::imean() const {
  // @@protoc_insertion_point(field_list:snn.RunResponse.imean)
  return imean_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RunResponse::mutable_imean() {
  // @@protoc_insertion_point(field_mutable_list:snn.RunResponse.imean)
  return &imean_;
}

// -------------------------------------------------------------------

// MetricRequest

// -------------------------------------------------------------------

// MetricInfo

// string name = 1;
inline void MetricInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MetricInfo::name() const {
  // @@protoc_insertion_point(field_get:snn.MetricInfo.name)
  return name_.GetNoArena();
}
inline void MetricInfo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:snn.MetricInfo.name)
}
inline void MetricInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:snn.MetricInfo.name)
}
inline void MetricInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:snn.MetricInfo.name)
}
inline void MetricInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:snn.MetricInfo.name)
}
inline std::string* MetricInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:snn.MetricInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MetricInfo::release_name() {
  // @@protoc_insertion_point(field_release:snn.MetricInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MetricInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:snn.MetricInfo.name)
}

// double computing_duration = 2;
inline void MetricInfo::clear_computing_duration() {
  computing_duration_ = 0;
}
inline double MetricInfo::computing_duration() const {
  // @@protoc_insertion_point(field_get:snn.MetricInfo.computing_duration)
  return computing_duration_;
}
inline void MetricInfo::set_computing_duration(double value) {
  
  computing_duration_ = value;
  // @@protoc_insertion_point(field_set:snn.MetricInfo.computing_duration)
}

// double reporting_duration = 3;
inline void MetricInfo::clear_reporting_duration() {
  reporting_duration_ = 0;
}
inline double MetricInfo::reporting_duration() const {
  // @@protoc_insertion_point(field_get:snn.MetricInfo.reporting_duration)
  return reporting_duration_;
}
inline void MetricInfo::set_reporting_duration(double value) {
  
  reporting_duration_ = value;
  // @@protoc_insertion_point(field_set:snn.MetricInfo.reporting_duration)
}

// double duration_inter_node = 4;
inline void MetricInfo::clear_duration_inter_node() {
  duration_inter_node_ = 0;
}
inline double MetricInfo::duration_inter_node() const {
  // @@protoc_insertion_point(field_get:snn.MetricInfo.duration_inter_node)
  return duration_inter_node_;
}
inline void MetricInfo::set_duration_inter_node(double value) {
  
  duration_inter_node_ = value;
  // @@protoc_insertion_point(field_set:snn.MetricInfo.duration_inter_node)
}

// double duration_intra_node = 5;
inline void MetricInfo::clear_duration_intra_node() {
  duration_intra_node_ = 0;
}
inline double MetricInfo::duration_intra_node() const {
  // @@protoc_insertion_point(field_get:snn.MetricInfo.duration_intra_node)
  return duration_intra_node_;
}
inline void MetricInfo::set_duration_intra_node(double value) {
  
  duration_intra_node_ = value;
  // @@protoc_insertion_point(field_set:snn.MetricInfo.duration_intra_node)
}

// uint64 sending_byte_size_inter_node = 6;
inline void MetricInfo::clear_sending_byte_size_inter_node() {
  sending_byte_size_inter_node_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetricInfo::sending_byte_size_inter_node() const {
  // @@protoc_insertion_point(field_get:snn.MetricInfo.sending_byte_size_inter_node)
  return sending_byte_size_inter_node_;
}
inline void MetricInfo::set_sending_byte_size_inter_node(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sending_byte_size_inter_node_ = value;
  // @@protoc_insertion_point(field_set:snn.MetricInfo.sending_byte_size_inter_node)
}

// uint64 sending_byte_size_intra_node = 7;
inline void MetricInfo::clear_sending_byte_size_intra_node() {
  sending_byte_size_intra_node_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetricInfo::sending_byte_size_intra_node() const {
  // @@protoc_insertion_point(field_get:snn.MetricInfo.sending_byte_size_intra_node)
  return sending_byte_size_intra_node_;
}
inline void MetricInfo::set_sending_byte_size_intra_node(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  sending_byte_size_intra_node_ = value;
  // @@protoc_insertion_point(field_set:snn.MetricInfo.sending_byte_size_intra_node)
}

// uint64 recving_byte_size_inter_node = 8;
inline void MetricInfo::clear_recving_byte_size_inter_node() {
  recving_byte_size_inter_node_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetricInfo::recving_byte_size_inter_node() const {
  // @@protoc_insertion_point(field_get:snn.MetricInfo.recving_byte_size_inter_node)
  return recving_byte_size_inter_node_;
}
inline void MetricInfo::set_recving_byte_size_inter_node(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  recving_byte_size_inter_node_ = value;
  // @@protoc_insertion_point(field_set:snn.MetricInfo.recving_byte_size_inter_node)
}

// uint64 recving_byte_size_intra_node = 9;
inline void MetricInfo::clear_recving_byte_size_intra_node() {
  recving_byte_size_intra_node_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MetricInfo::recving_byte_size_intra_node() const {
  // @@protoc_insertion_point(field_get:snn.MetricInfo.recving_byte_size_intra_node)
  return recving_byte_size_intra_node_;
}
inline void MetricInfo::set_recving_byte_size_intra_node(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  recving_byte_size_intra_node_ = value;
  // @@protoc_insertion_point(field_set:snn.MetricInfo.recving_byte_size_intra_node)
}

// -------------------------------------------------------------------

// MetricResponse

// .snn.SnnStatus status = 1;
inline void MetricResponse::clear_status() {
  status_ = 0;
}
inline ::snn::SnnStatus MetricResponse::status() const {
  // @@protoc_insertion_point(field_get:snn.MetricResponse.status)
  return static_cast< ::snn::SnnStatus >(status_);
}
inline void MetricResponse::set_status(::snn::SnnStatus value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:snn.MetricResponse.status)
}

// repeated .snn.MetricInfo metric = 2;
inline int MetricResponse::metric_size() const {
  return metric_.size();
}
inline void MetricResponse::clear_metric() {
  metric_.Clear();
}
inline ::snn::MetricInfo* MetricResponse::mutable_metric(int index) {
  // @@protoc_insertion_point(field_mutable:snn.MetricResponse.metric)
  return metric_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snn::MetricInfo >*
MetricResponse::mutable_metric() {
  // @@protoc_insertion_point(field_mutable_list:snn.MetricResponse.metric)
  return &metric_;
}
inline const ::snn::MetricInfo& MetricResponse::metric(int index) const {
  // @@protoc_insertion_point(field_get:snn.MetricResponse.metric)
  return metric_.Get(index);
}
inline ::snn::MetricInfo* MetricResponse::add_metric() {
  // @@protoc_insertion_point(field_add:snn.MetricResponse.metric)
  return metric_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::snn::MetricInfo >&
MetricResponse::metric() const {
  // @@protoc_insertion_point(field_list:snn.MetricResponse.metric)
  return metric_;
}

// -------------------------------------------------------------------

// UpdatePropRequest

// int32 block_id = 1;
inline void UpdatePropRequest::clear_block_id() {
  block_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePropRequest::block_id() const {
  // @@protoc_insertion_point(field_get:snn.UpdatePropRequest.block_id)
  return block_id_;
}
inline void UpdatePropRequest::set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:snn.UpdatePropRequest.block_id)
}

// repeated int32 neuron_id = 2;
inline int UpdatePropRequest::neuron_id_size() const {
  return neuron_id_.size();
}
inline void UpdatePropRequest::clear_neuron_id() {
  neuron_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePropRequest::neuron_id(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdatePropRequest.neuron_id)
  return neuron_id_.Get(index);
}
inline void UpdatePropRequest::set_neuron_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  neuron_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:snn.UpdatePropRequest.neuron_id)
}
inline void UpdatePropRequest::add_neuron_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  neuron_id_.Add(value);
  // @@protoc_insertion_point(field_add:snn.UpdatePropRequest.neuron_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UpdatePropRequest::neuron_id() const {
  // @@protoc_insertion_point(field_list:snn.UpdatePropRequest.neuron_id)
  return neuron_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UpdatePropRequest::mutable_neuron_id() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdatePropRequest.neuron_id)
  return &neuron_id_;
}

// repeated .snn.PropType prop_id = 3;
inline int UpdatePropRequest::prop_id_size() const {
  return prop_id_.size();
}
inline void UpdatePropRequest::clear_prop_id() {
  prop_id_.Clear();
}
inline ::snn::PropType UpdatePropRequest::prop_id(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdatePropRequest.prop_id)
  return static_cast< ::snn::PropType >(prop_id_.Get(index));
}
inline void UpdatePropRequest::set_prop_id(int index, ::snn::PropType value) {
  prop_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:snn.UpdatePropRequest.prop_id)
}
inline void UpdatePropRequest::add_prop_id(::snn::PropType value) {
  prop_id_.Add(value);
  // @@protoc_insertion_point(field_add:snn.UpdatePropRequest.prop_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
UpdatePropRequest::prop_id() const {
  // @@protoc_insertion_point(field_list:snn.UpdatePropRequest.prop_id)
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UpdatePropRequest::mutable_prop_id() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdatePropRequest.prop_id)
  return &prop_id_;
}

// repeated float prop_val = 4;
inline int UpdatePropRequest::prop_val_size() const {
  return prop_val_.size();
}
inline void UpdatePropRequest::clear_prop_val() {
  prop_val_.Clear();
}
inline float UpdatePropRequest::prop_val(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdatePropRequest.prop_val)
  return prop_val_.Get(index);
}
inline void UpdatePropRequest::set_prop_val(int index, float value) {
  prop_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:snn.UpdatePropRequest.prop_val)
}
inline void UpdatePropRequest::add_prop_val(float value) {
  prop_val_.Add(value);
  // @@protoc_insertion_point(field_add:snn.UpdatePropRequest.prop_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
UpdatePropRequest::prop_val() const {
  // @@protoc_insertion_point(field_list:snn.UpdatePropRequest.prop_val)
  return prop_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
UpdatePropRequest::mutable_prop_val() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdatePropRequest.prop_val)
  return &prop_val_;
}

// -------------------------------------------------------------------

// UpdatePropResponse

// bool success = 1;
inline void UpdatePropResponse::clear_success() {
  success_ = false;
}
inline bool UpdatePropResponse::success() const {
  // @@protoc_insertion_point(field_get:snn.UpdatePropResponse.success)
  return success_;
}
inline void UpdatePropResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:snn.UpdatePropResponse.success)
}

// -------------------------------------------------------------------

// UpdateGammaRequest

// int32 block_id = 1;
inline void UpdateGammaRequest::clear_block_id() {
  block_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateGammaRequest::block_id() const {
  // @@protoc_insertion_point(field_get:snn.UpdateGammaRequest.block_id)
  return block_id_;
}
inline void UpdateGammaRequest::set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:snn.UpdateGammaRequest.block_id)
}

// repeated .snn.PropType prop_id = 2;
inline int UpdateGammaRequest::prop_id_size() const {
  return prop_id_.size();
}
inline void UpdateGammaRequest::clear_prop_id() {
  prop_id_.Clear();
}
inline ::snn::PropType UpdateGammaRequest::prop_id(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdateGammaRequest.prop_id)
  return static_cast< ::snn::PropType >(prop_id_.Get(index));
}
inline void UpdateGammaRequest::set_prop_id(int index, ::snn::PropType value) {
  prop_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:snn.UpdateGammaRequest.prop_id)
}
inline void UpdateGammaRequest::add_prop_id(::snn::PropType value) {
  prop_id_.Add(value);
  // @@protoc_insertion_point(field_add:snn.UpdateGammaRequest.prop_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
UpdateGammaRequest::prop_id() const {
  // @@protoc_insertion_point(field_list:snn.UpdateGammaRequest.prop_id)
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UpdateGammaRequest::mutable_prop_id() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdateGammaRequest.prop_id)
  return &prop_id_;
}

// repeated int32 brain_id = 3;
inline int UpdateGammaRequest::brain_id_size() const {
  return brain_id_.size();
}
inline void UpdateGammaRequest::clear_brain_id() {
  brain_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateGammaRequest::brain_id(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdateGammaRequest.brain_id)
  return brain_id_.Get(index);
}
inline void UpdateGammaRequest::set_brain_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  brain_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:snn.UpdateGammaRequest.brain_id)
}
inline void UpdateGammaRequest::add_brain_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  brain_id_.Add(value);
  // @@protoc_insertion_point(field_add:snn.UpdateGammaRequest.brain_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UpdateGammaRequest::brain_id() const {
  // @@protoc_insertion_point(field_list:snn.UpdateGammaRequest.brain_id)
  return brain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UpdateGammaRequest::mutable_brain_id() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdateGammaRequest.brain_id)
  return &brain_id_;
}

// repeated float gamma_concentration = 4;
inline int UpdateGammaRequest::gamma_concentration_size() const {
  return gamma_concentration_.size();
}
inline void UpdateGammaRequest::clear_gamma_concentration() {
  gamma_concentration_.Clear();
}
inline float UpdateGammaRequest::gamma_concentration(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdateGammaRequest.gamma_concentration)
  return gamma_concentration_.Get(index);
}
inline void UpdateGammaRequest::set_gamma_concentration(int index, float value) {
  gamma_concentration_.Set(index, value);
  // @@protoc_insertion_point(field_set:snn.UpdateGammaRequest.gamma_concentration)
}
inline void UpdateGammaRequest::add_gamma_concentration(float value) {
  gamma_concentration_.Add(value);
  // @@protoc_insertion_point(field_add:snn.UpdateGammaRequest.gamma_concentration)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
UpdateGammaRequest::gamma_concentration() const {
  // @@protoc_insertion_point(field_list:snn.UpdateGammaRequest.gamma_concentration)
  return gamma_concentration_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
UpdateGammaRequest::mutable_gamma_concentration() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdateGammaRequest.gamma_concentration)
  return &gamma_concentration_;
}

// repeated float gamma_rate = 5;
inline int UpdateGammaRequest::gamma_rate_size() const {
  return gamma_rate_.size();
}
inline void UpdateGammaRequest::clear_gamma_rate() {
  gamma_rate_.Clear();
}
inline float UpdateGammaRequest::gamma_rate(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdateGammaRequest.gamma_rate)
  return gamma_rate_.Get(index);
}
inline void UpdateGammaRequest::set_gamma_rate(int index, float value) {
  gamma_rate_.Set(index, value);
  // @@protoc_insertion_point(field_set:snn.UpdateGammaRequest.gamma_rate)
}
inline void UpdateGammaRequest::add_gamma_rate(float value) {
  gamma_rate_.Add(value);
  // @@protoc_insertion_point(field_add:snn.UpdateGammaRequest.gamma_rate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
UpdateGammaRequest::gamma_rate() const {
  // @@protoc_insertion_point(field_list:snn.UpdateGammaRequest.gamma_rate)
  return gamma_rate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
UpdateGammaRequest::mutable_gamma_rate() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdateGammaRequest.gamma_rate)
  return &gamma_rate_;
}

// -------------------------------------------------------------------

// UpdateGammaResponse

// bool success = 1;
inline void UpdateGammaResponse::clear_success() {
  success_ = false;
}
inline bool UpdateGammaResponse::success() const {
  // @@protoc_insertion_point(field_get:snn.UpdateGammaResponse.success)
  return success_;
}
inline void UpdateGammaResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:snn.UpdateGammaResponse.success)
}

// -------------------------------------------------------------------

// UpdateGammaWithResultResponse

// int32 block_id = 1;
inline void UpdateGammaWithResultResponse::clear_block_id() {
  block_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateGammaWithResultResponse::block_id() const {
  // @@protoc_insertion_point(field_get:snn.UpdateGammaWithResultResponse.block_id)
  return block_id_;
}
inline void UpdateGammaWithResultResponse::set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:snn.UpdateGammaWithResultResponse.block_id)
}

// .snn.PropType prop_id = 2;
inline void UpdateGammaWithResultResponse::clear_prop_id() {
  prop_id_ = 0;
}
inline ::snn::PropType UpdateGammaWithResultResponse::prop_id() const {
  // @@protoc_insertion_point(field_get:snn.UpdateGammaWithResultResponse.prop_id)
  return static_cast< ::snn::PropType >(prop_id_);
}
inline void UpdateGammaWithResultResponse::set_prop_id(::snn::PropType value) {
  
  prop_id_ = value;
  // @@protoc_insertion_point(field_set:snn.UpdateGammaWithResultResponse.prop_id)
}

// int32 brain_id = 3;
inline void UpdateGammaWithResultResponse::clear_brain_id() {
  brain_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateGammaWithResultResponse::brain_id() const {
  // @@protoc_insertion_point(field_get:snn.UpdateGammaWithResultResponse.brain_id)
  return brain_id_;
}
inline void UpdateGammaWithResultResponse::set_brain_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  brain_id_ = value;
  // @@protoc_insertion_point(field_set:snn.UpdateGammaWithResultResponse.brain_id)
}

// repeated bytes prop_val = 4;
inline int UpdateGammaWithResultResponse::prop_val_size() const {
  return prop_val_.size();
}
inline void UpdateGammaWithResultResponse::clear_prop_val() {
  prop_val_.Clear();
}
inline const std::string& UpdateGammaWithResultResponse::prop_val(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdateGammaWithResultResponse.prop_val)
  return prop_val_.Get(index);
}
inline std::string* UpdateGammaWithResultResponse::mutable_prop_val(int index) {
  // @@protoc_insertion_point(field_mutable:snn.UpdateGammaWithResultResponse.prop_val)
  return prop_val_.Mutable(index);
}
inline void UpdateGammaWithResultResponse::set_prop_val(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:snn.UpdateGammaWithResultResponse.prop_val)
  prop_val_.Mutable(index)->assign(value);
}
inline void UpdateGammaWithResultResponse::set_prop_val(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:snn.UpdateGammaWithResultResponse.prop_val)
  prop_val_.Mutable(index)->assign(std::move(value));
}
inline void UpdateGammaWithResultResponse::set_prop_val(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prop_val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:snn.UpdateGammaWithResultResponse.prop_val)
}
inline void UpdateGammaWithResultResponse::set_prop_val(int index, const void* value, size_t size) {
  prop_val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:snn.UpdateGammaWithResultResponse.prop_val)
}
inline std::string* UpdateGammaWithResultResponse::add_prop_val() {
  // @@protoc_insertion_point(field_add_mutable:snn.UpdateGammaWithResultResponse.prop_val)
  return prop_val_.Add();
}
inline void UpdateGammaWithResultResponse::add_prop_val(const std::string& value) {
  prop_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:snn.UpdateGammaWithResultResponse.prop_val)
}
inline void UpdateGammaWithResultResponse::add_prop_val(std::string&& value) {
  prop_val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:snn.UpdateGammaWithResultResponse.prop_val)
}
inline void UpdateGammaWithResultResponse::add_prop_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  prop_val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:snn.UpdateGammaWithResultResponse.prop_val)
}
inline void UpdateGammaWithResultResponse::add_prop_val(const void* value, size_t size) {
  prop_val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:snn.UpdateGammaWithResultResponse.prop_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UpdateGammaWithResultResponse::prop_val() const {
  // @@protoc_insertion_point(field_list:snn.UpdateGammaWithResultResponse.prop_val)
  return prop_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UpdateGammaWithResultResponse::mutable_prop_val() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdateGammaWithResultResponse.prop_val)
  return &prop_val_;
}

// -------------------------------------------------------------------

// UpdateHyperParaRequest

// int32 block_id = 1;
inline void UpdateHyperParaRequest::clear_block_id() {
  block_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateHyperParaRequest::block_id() const {
  // @@protoc_insertion_point(field_get:snn.UpdateHyperParaRequest.block_id)
  return block_id_;
}
inline void UpdateHyperParaRequest::set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:snn.UpdateHyperParaRequest.block_id)
}

// repeated .snn.PropType prop_id = 2;
inline int UpdateHyperParaRequest::prop_id_size() const {
  return prop_id_.size();
}
inline void UpdateHyperParaRequest::clear_prop_id() {
  prop_id_.Clear();
}
inline ::snn::PropType UpdateHyperParaRequest::prop_id(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdateHyperParaRequest.prop_id)
  return static_cast< ::snn::PropType >(prop_id_.Get(index));
}
inline void UpdateHyperParaRequest::set_prop_id(int index, ::snn::PropType value) {
  prop_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:snn.UpdateHyperParaRequest.prop_id)
}
inline void UpdateHyperParaRequest::add_prop_id(::snn::PropType value) {
  prop_id_.Add(value);
  // @@protoc_insertion_point(field_add:snn.UpdateHyperParaRequest.prop_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
UpdateHyperParaRequest::prop_id() const {
  // @@protoc_insertion_point(field_list:snn.UpdateHyperParaRequest.prop_id)
  return prop_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
UpdateHyperParaRequest::mutable_prop_id() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdateHyperParaRequest.prop_id)
  return &prop_id_;
}

// repeated int32 brain_id = 3;
inline int UpdateHyperParaRequest::brain_id_size() const {
  return brain_id_.size();
}
inline void UpdateHyperParaRequest::clear_brain_id() {
  brain_id_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateHyperParaRequest::brain_id(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdateHyperParaRequest.brain_id)
  return brain_id_.Get(index);
}
inline void UpdateHyperParaRequest::set_brain_id(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  brain_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:snn.UpdateHyperParaRequest.brain_id)
}
inline void UpdateHyperParaRequest::add_brain_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  brain_id_.Add(value);
  // @@protoc_insertion_point(field_add:snn.UpdateHyperParaRequest.brain_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UpdateHyperParaRequest::brain_id() const {
  // @@protoc_insertion_point(field_list:snn.UpdateHyperParaRequest.brain_id)
  return brain_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UpdateHyperParaRequest::mutable_brain_id() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdateHyperParaRequest.brain_id)
  return &brain_id_;
}

// repeated float hpara_val = 4;
inline int UpdateHyperParaRequest::hpara_val_size() const {
  return hpara_val_.size();
}
inline void UpdateHyperParaRequest::clear_hpara_val() {
  hpara_val_.Clear();
}
inline float UpdateHyperParaRequest::hpara_val(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdateHyperParaRequest.hpara_val)
  return hpara_val_.Get(index);
}
inline void UpdateHyperParaRequest::set_hpara_val(int index, float value) {
  hpara_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:snn.UpdateHyperParaRequest.hpara_val)
}
inline void UpdateHyperParaRequest::add_hpara_val(float value) {
  hpara_val_.Add(value);
  // @@protoc_insertion_point(field_add:snn.UpdateHyperParaRequest.hpara_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
UpdateHyperParaRequest::hpara_val() const {
  // @@protoc_insertion_point(field_list:snn.UpdateHyperParaRequest.hpara_val)
  return hpara_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
UpdateHyperParaRequest::mutable_hpara_val() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdateHyperParaRequest.hpara_val)
  return &hpara_val_;
}

// -------------------------------------------------------------------

// UpdateHyperParaResponse

// bool success = 1;
inline void UpdateHyperParaResponse::clear_success() {
  success_ = false;
}
inline bool UpdateHyperParaResponse::success() const {
  // @@protoc_insertion_point(field_get:snn.UpdateHyperParaResponse.success)
  return success_;
}
inline void UpdateHyperParaResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:snn.UpdateHyperParaResponse.success)
}

// -------------------------------------------------------------------

// UpdateSampleRequest

// int32 block_id = 1;
inline void UpdateSampleRequest::clear_block_id() {
  block_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateSampleRequest::block_id() const {
  // @@protoc_insertion_point(field_get:snn.UpdateSampleRequest.block_id)
  return block_id_;
}
inline void UpdateSampleRequest::set_block_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:snn.UpdateSampleRequest.block_id)
}

// repeated int32 sample_idx = 2;
inline int UpdateSampleRequest::sample_idx_size() const {
  return sample_idx_.size();
}
inline void UpdateSampleRequest::clear_sample_idx() {
  sample_idx_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdateSampleRequest::sample_idx(int index) const {
  // @@protoc_insertion_point(field_get:snn.UpdateSampleRequest.sample_idx)
  return sample_idx_.Get(index);
}
inline void UpdateSampleRequest::set_sample_idx(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  sample_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:snn.UpdateSampleRequest.sample_idx)
}
inline void UpdateSampleRequest::add_sample_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  sample_idx_.Add(value);
  // @@protoc_insertion_point(field_add:snn.UpdateSampleRequest.sample_idx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UpdateSampleRequest::sample_idx() const {
  // @@protoc_insertion_point(field_list:snn.UpdateSampleRequest.sample_idx)
  return sample_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UpdateSampleRequest::mutable_sample_idx() {
  // @@protoc_insertion_point(field_mutable_list:snn.UpdateSampleRequest.sample_idx)
  return &sample_idx_;
}

// -------------------------------------------------------------------

// UpdateSampleResponse

// bool success = 1;
inline void UpdateSampleResponse::clear_success() {
  success_ = false;
}
inline bool UpdateSampleResponse::success() const {
  // @@protoc_insertion_point(field_get:snn.UpdateSampleResponse.success)
  return success_;
}
inline void UpdateSampleResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:snn.UpdateSampleResponse.success)
}

// -------------------------------------------------------------------

// ShutdownRequest

// -------------------------------------------------------------------

// ShutdownResponse

// bool shutdown = 1;
inline void ShutdownResponse::clear_shutdown() {
  shutdown_ = false;
}
inline bool ShutdownResponse::shutdown() const {
  // @@protoc_insertion_point(field_get:snn.ShutdownResponse.shutdown)
  return shutdown_;
}
inline void ShutdownResponse::set_shutdown(bool value) {
  
  shutdown_ = value;
  // @@protoc_insertion_point(field_set:snn.ShutdownResponse.shutdown)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace snn

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::snn::InitRequest_CommMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snn::InitRequest_CommMode>() {
  return ::snn::InitRequest_CommMode_descriptor();
}
template <> struct is_proto_enum< ::snn::RunRequest_Strategy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snn::RunRequest_Strategy>() {
  return ::snn::RunRequest_Strategy_descriptor();
}
template <> struct is_proto_enum< ::snn::SnnStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snn::SnnStatus>() {
  return ::snn::SnnStatus_descriptor();
}
template <> struct is_proto_enum< ::snn::PropType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::snn::PropType>() {
  return ::snn::PropType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_snn_2eproto
