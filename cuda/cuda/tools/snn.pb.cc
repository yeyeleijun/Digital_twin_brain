// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snn.proto

#include "snn.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_snn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetricInfo_snn_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snn_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubblockInfo_snn_2eproto;
namespace snn {
class InitRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitRequest> _instance;
} _InitRequest_default_instance_;
class SubblockInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubblockInfo> _instance;
} _SubblockInfo_default_instance_;
class InitResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitResponse> _instance;
} _InitResponse_default_instance_;
class RunRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunRequest> _instance;
} _RunRequest_default_instance_;
class RunResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RunResponse> _instance;
} _RunResponse_default_instance_;
class MetricRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricRequest> _instance;
} _MetricRequest_default_instance_;
class MetricInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricInfo> _instance;
} _MetricInfo_default_instance_;
class MetricResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricResponse> _instance;
} _MetricResponse_default_instance_;
class UpdatePropRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePropRequest> _instance;
} _UpdatePropRequest_default_instance_;
class UpdatePropResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePropResponse> _instance;
} _UpdatePropResponse_default_instance_;
class UpdateGammaRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateGammaRequest> _instance;
} _UpdateGammaRequest_default_instance_;
class UpdateGammaResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateGammaResponse> _instance;
} _UpdateGammaResponse_default_instance_;
class UpdateGammaWithResultResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateGammaWithResultResponse> _instance;
} _UpdateGammaWithResultResponse_default_instance_;
class UpdateHyperParaRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateHyperParaRequest> _instance;
} _UpdateHyperParaRequest_default_instance_;
class UpdateHyperParaResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateHyperParaResponse> _instance;
} _UpdateHyperParaResponse_default_instance_;
class UpdateSampleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSampleRequest> _instance;
} _UpdateSampleRequest_default_instance_;
class UpdateSampleResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSampleResponse> _instance;
} _UpdateSampleResponse_default_instance_;
class ShutdownRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShutdownRequest> _instance;
} _ShutdownRequest_default_instance_;
class ShutdownResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShutdownResponse> _instance;
} _ShutdownResponse_default_instance_;
}  // namespace snn
static void InitDefaultsscc_info_InitRequest_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_InitRequest_default_instance_;
    new (ptr) ::snn::InitRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::InitRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitRequest_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_InitRequest_snn_2eproto}, {}};

static void InitDefaultsscc_info_InitResponse_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_InitResponse_default_instance_;
    new (ptr) ::snn::InitResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::InitResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitResponse_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_InitResponse_snn_2eproto}, {
      &scc_info_SubblockInfo_snn_2eproto.base,}};

static void InitDefaultsscc_info_MetricInfo_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_MetricInfo_default_instance_;
    new (ptr) ::snn::MetricInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::MetricInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetricInfo_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MetricInfo_snn_2eproto}, {}};

static void InitDefaultsscc_info_MetricRequest_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_MetricRequest_default_instance_;
    new (ptr) ::snn::MetricRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::MetricRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetricRequest_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_MetricRequest_snn_2eproto}, {}};

static void InitDefaultsscc_info_MetricResponse_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_MetricResponse_default_instance_;
    new (ptr) ::snn::MetricResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::MetricResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricResponse_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_MetricResponse_snn_2eproto}, {
      &scc_info_MetricInfo_snn_2eproto.base,}};

static void InitDefaultsscc_info_RunRequest_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_RunRequest_default_instance_;
    new (ptr) ::snn::RunRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::RunRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunRequest_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RunRequest_snn_2eproto}, {}};

static void InitDefaultsscc_info_RunResponse_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_RunResponse_default_instance_;
    new (ptr) ::snn::RunResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::RunResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RunResponse_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_RunResponse_snn_2eproto}, {}};

static void InitDefaultsscc_info_ShutdownRequest_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_ShutdownRequest_default_instance_;
    new (ptr) ::snn::ShutdownRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::ShutdownRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutdownRequest_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ShutdownRequest_snn_2eproto}, {}};

static void InitDefaultsscc_info_ShutdownResponse_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_ShutdownResponse_default_instance_;
    new (ptr) ::snn::ShutdownResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::ShutdownResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShutdownResponse_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_ShutdownResponse_snn_2eproto}, {}};

static void InitDefaultsscc_info_SubblockInfo_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_SubblockInfo_default_instance_;
    new (ptr) ::snn::SubblockInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::SubblockInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubblockInfo_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_SubblockInfo_snn_2eproto}, {}};

static void InitDefaultsscc_info_UpdateGammaRequest_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_UpdateGammaRequest_default_instance_;
    new (ptr) ::snn::UpdateGammaRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::UpdateGammaRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateGammaRequest_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateGammaRequest_snn_2eproto}, {}};

static void InitDefaultsscc_info_UpdateGammaResponse_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_UpdateGammaResponse_default_instance_;
    new (ptr) ::snn::UpdateGammaResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::UpdateGammaResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateGammaResponse_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateGammaResponse_snn_2eproto}, {}};

static void InitDefaultsscc_info_UpdateGammaWithResultResponse_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_UpdateGammaWithResultResponse_default_instance_;
    new (ptr) ::snn::UpdateGammaWithResultResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::UpdateGammaWithResultResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateGammaWithResultResponse_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateGammaWithResultResponse_snn_2eproto}, {}};

static void InitDefaultsscc_info_UpdateHyperParaRequest_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_UpdateHyperParaRequest_default_instance_;
    new (ptr) ::snn::UpdateHyperParaRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::UpdateHyperParaRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateHyperParaRequest_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateHyperParaRequest_snn_2eproto}, {}};

static void InitDefaultsscc_info_UpdateHyperParaResponse_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_UpdateHyperParaResponse_default_instance_;
    new (ptr) ::snn::UpdateHyperParaResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::UpdateHyperParaResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateHyperParaResponse_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateHyperParaResponse_snn_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePropRequest_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_UpdatePropRequest_default_instance_;
    new (ptr) ::snn::UpdatePropRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::UpdatePropRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePropRequest_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdatePropRequest_snn_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePropResponse_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_UpdatePropResponse_default_instance_;
    new (ptr) ::snn::UpdatePropResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::UpdatePropResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePropResponse_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdatePropResponse_snn_2eproto}, {}};

static void InitDefaultsscc_info_UpdateSampleRequest_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_UpdateSampleRequest_default_instance_;
    new (ptr) ::snn::UpdateSampleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::UpdateSampleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateSampleRequest_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateSampleRequest_snn_2eproto}, {}};

static void InitDefaultsscc_info_UpdateSampleResponse_snn_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::snn::_UpdateSampleResponse_default_instance_;
    new (ptr) ::snn::UpdateSampleResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::snn::UpdateSampleResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateSampleResponse_snn_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UpdateSampleResponse_snn_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_snn_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_snn_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_snn_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_snn_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::InitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::InitRequest, file_path_),
  PROTOBUF_FIELD_OFFSET(::snn::InitRequest, route_path_),
  PROTOBUF_FIELD_OFFSET(::snn::InitRequest, delta_t_),
  PROTOBUF_FIELD_OFFSET(::snn::InitRequest, mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::SubblockInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::SubblockInfo, subblk_id_),
  PROTOBUF_FIELD_OFFSET(::snn::SubblockInfo, subblk_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::InitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::InitResponse, status_),
  PROTOBUF_FIELD_OFFSET(::snn::InitResponse, block_id_),
  PROTOBUF_FIELD_OFFSET(::snn::InitResponse, neurons_per_block_),
  PROTOBUF_FIELD_OFFSET(::snn::InitResponse, subblk_info_),
  PROTOBUF_FIELD_OFFSET(::snn::InitResponse, used_cpu_mem_),
  PROTOBUF_FIELD_OFFSET(::snn::InitResponse, total_gpu_mem_),
  PROTOBUF_FIELD_OFFSET(::snn::InitResponse, used_gpu_mem_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::RunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::RunRequest, iter_),
  PROTOBUF_FIELD_OFFSET(::snn::RunRequest, iter_offset_),
  PROTOBUF_FIELD_OFFSET(::snn::RunRequest, output_freq_),
  PROTOBUF_FIELD_OFFSET(::snn::RunRequest, output_vmean_),
  PROTOBUF_FIELD_OFFSET(::snn::RunRequest, output_sample_),
  PROTOBUF_FIELD_OFFSET(::snn::RunRequest, strategy_),
  PROTOBUF_FIELD_OFFSET(::snn::RunRequest, output_imean_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::RunResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::RunResponse, status_),
  PROTOBUF_FIELD_OFFSET(::snn::RunResponse, freq_),
  PROTOBUF_FIELD_OFFSET(::snn::RunResponse, vmean_),
  PROTOBUF_FIELD_OFFSET(::snn::RunResponse, sample_spike_),
  PROTOBUF_FIELD_OFFSET(::snn::RunResponse, sample_vmemb_),
  PROTOBUF_FIELD_OFFSET(::snn::RunResponse, imean_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::MetricRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::MetricInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::MetricInfo, name_),
  PROTOBUF_FIELD_OFFSET(::snn::MetricInfo, computing_duration_),
  PROTOBUF_FIELD_OFFSET(::snn::MetricInfo, reporting_duration_),
  PROTOBUF_FIELD_OFFSET(::snn::MetricInfo, duration_inter_node_),
  PROTOBUF_FIELD_OFFSET(::snn::MetricInfo, duration_intra_node_),
  PROTOBUF_FIELD_OFFSET(::snn::MetricInfo, sending_byte_size_inter_node_),
  PROTOBUF_FIELD_OFFSET(::snn::MetricInfo, sending_byte_size_intra_node_),
  PROTOBUF_FIELD_OFFSET(::snn::MetricInfo, recving_byte_size_inter_node_),
  PROTOBUF_FIELD_OFFSET(::snn::MetricInfo, recving_byte_size_intra_node_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::MetricResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::MetricResponse, status_),
  PROTOBUF_FIELD_OFFSET(::snn::MetricResponse, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::UpdatePropRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::UpdatePropRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdatePropRequest, neuron_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdatePropRequest, prop_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdatePropRequest, prop_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::UpdatePropResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::UpdatePropResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaRequest, prop_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaRequest, brain_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaRequest, gamma_concentration_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaRequest, gamma_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaWithResultResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaWithResultResponse, block_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaWithResultResponse, prop_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaWithResultResponse, brain_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdateGammaWithResultResponse, prop_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateHyperParaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateHyperParaRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdateHyperParaRequest, prop_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdateHyperParaRequest, brain_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdateHyperParaRequest, hpara_val_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateHyperParaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateHyperParaResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateSampleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateSampleRequest, block_id_),
  PROTOBUF_FIELD_OFFSET(::snn::UpdateSampleRequest, sample_idx_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateSampleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::UpdateSampleResponse, success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::ShutdownRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::snn::ShutdownResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::snn::ShutdownResponse, shutdown_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::snn::InitRequest)},
  { 9, -1, sizeof(::snn::SubblockInfo)},
  { 16, -1, sizeof(::snn::InitResponse)},
  { 28, -1, sizeof(::snn::RunRequest)},
  { 40, -1, sizeof(::snn::RunResponse)},
  { 51, -1, sizeof(::snn::MetricRequest)},
  { 56, -1, sizeof(::snn::MetricInfo)},
  { 70, -1, sizeof(::snn::MetricResponse)},
  { 77, -1, sizeof(::snn::UpdatePropRequest)},
  { 86, -1, sizeof(::snn::UpdatePropResponse)},
  { 92, -1, sizeof(::snn::UpdateGammaRequest)},
  { 102, -1, sizeof(::snn::UpdateGammaResponse)},
  { 108, -1, sizeof(::snn::UpdateGammaWithResultResponse)},
  { 117, -1, sizeof(::snn::UpdateHyperParaRequest)},
  { 126, -1, sizeof(::snn::UpdateHyperParaResponse)},
  { 132, -1, sizeof(::snn::UpdateSampleRequest)},
  { 139, -1, sizeof(::snn::UpdateSampleResponse)},
  { 145, -1, sizeof(::snn::ShutdownRequest)},
  { 150, -1, sizeof(::snn::ShutdownResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_InitRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_SubblockInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_InitResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_RunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_RunResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_MetricRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_MetricInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_MetricResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_UpdatePropRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_UpdatePropResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_UpdateGammaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_UpdateGammaResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_UpdateGammaWithResultResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_UpdateHyperParaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_UpdateHyperParaResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_UpdateSampleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_UpdateSampleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_ShutdownRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::snn::_ShutdownResponse_default_instance_),
};

const char descriptor_table_protodef_snn_2eproto[] =
  "\n\tsnn.proto\022\003snn\"\314\001\n\013InitRequest\022\021\n\tfile"
  "_path\030\001 \001(\t\022\022\n\nroute_path\030\002 \001(\t\022\017\n\007delta"
  "_t\030\003 \001(\002\022\'\n\004mode\030\004 \001(\0162\031.snn.InitRequest"
  ".CommMode\"\\\n\010CommMode\022\027\n\023COMM_POINT_TO_P"
  "OINT\020\000\022\034\n\030COMM_ROUTE_WITHOUT_MERGE\020\001\022\031\n\025"
  "COMM_ROUTE_WITH_MERGE\020\002\"5\n\014SubblockInfo\022"
  "\021\n\tsubblk_id\030\001 \001(\005\022\022\n\nsubblk_num\030\002 \001(\005\"\306"
  "\001\n\014InitResponse\022\036\n\006status\030\001 \001(\0162\016.snn.Sn"
  "nStatus\022\020\n\010block_id\030\002 \001(\005\022\031\n\021neurons_per"
  "_block\030\003 \001(\005\022&\n\013subblk_info\030\004 \003(\0132\021.snn."
  "SubblockInfo\022\024\n\014used_cpu_mem\030\005 \001(\001\022\025\n\rto"
  "tal_gpu_mem\030\006 \001(\001\022\024\n\014used_gpu_mem\030\007 \001(\001\""
  "\223\002\n\nRunRequest\022\014\n\004iter\030\001 \001(\005\022\023\n\013iter_off"
  "set\030\002 \001(\005\022\023\n\013output_freq\030\003 \001(\010\022\024\n\014output"
  "_vmean\030\004 \001(\010\022\025\n\routput_sample\030\005 \001(\010\022*\n\010s"
  "trategy\030\006 \001(\0162\030.snn.RunRequest.Strategy\022"
  "\024\n\014output_imean\030\007 \001(\010\"^\n\010Strategy\022\034\n\030STR"
  "ATEGY_SEND_SEQUENTIAL\020\000\022\032\n\026STRATEGY_SEND"
  "_PAIRWISE\020\001\022\030\n\024STRATEGY_SEND_RANDOM\020\002\"\205\001"
  "\n\013RunResponse\022\036\n\006status\030\001 \001(\0162\016.snn.SnnS"
  "tatus\022\014\n\004freq\030\002 \003(\014\022\r\n\005vmean\030\003 \003(\014\022\024\n\014sa"
  "mple_spike\030\004 \003(\014\022\024\n\014sample_vmemb\030\005 \003(\014\022\r"
  "\n\005imean\030\006 \003(\014\"\017\n\rMetricRequest\"\244\002\n\nMetri"
  "cInfo\022\014\n\004name\030\001 \001(\t\022\032\n\022computing_duratio"
  "n\030\002 \001(\001\022\032\n\022reporting_duration\030\003 \001(\001\022\033\n\023d"
  "uration_inter_node\030\004 \001(\001\022\033\n\023duration_int"
  "ra_node\030\005 \001(\001\022$\n\034sending_byte_size_inter"
  "_node\030\006 \001(\004\022$\n\034sending_byte_size_intra_n"
  "ode\030\007 \001(\004\022$\n\034recving_byte_size_inter_nod"
  "e\030\010 \001(\004\022$\n\034recving_byte_size_intra_node\030"
  "\t \001(\004\"Q\n\016MetricResponse\022\036\n\006status\030\001 \001(\0162"
  "\016.snn.SnnStatus\022\037\n\006metric\030\002 \003(\0132\017.snn.Me"
  "tricInfo\"j\n\021UpdatePropRequest\022\020\n\010block_i"
  "d\030\001 \001(\005\022\021\n\tneuron_id\030\002 \003(\005\022\036\n\007prop_id\030\003 "
  "\003(\0162\r.snn.PropType\022\020\n\010prop_val\030\004 \003(\002\"%\n\022"
  "UpdatePropResponse\022\017\n\007success\030\001 \001(\010\"\211\001\n\022"
  "UpdateGammaRequest\022\020\n\010block_id\030\001 \001(\005\022\036\n\007"
  "prop_id\030\002 \003(\0162\r.snn.PropType\022\020\n\010brain_id"
  "\030\003 \003(\005\022\033\n\023gamma_concentration\030\004 \003(\002\022\022\n\ng"
  "amma_rate\030\005 \003(\002\"&\n\023UpdateGammaResponse\022\017"
  "\n\007success\030\001 \001(\010\"u\n\035UpdateGammaWithResult"
  "Response\022\020\n\010block_id\030\001 \001(\005\022\036\n\007prop_id\030\002 "
  "\001(\0162\r.snn.PropType\022\020\n\010brain_id\030\003 \001(\005\022\020\n\010"
  "prop_val\030\004 \003(\014\"o\n\026UpdateHyperParaRequest"
  "\022\020\n\010block_id\030\001 \001(\005\022\036\n\007prop_id\030\002 \003(\0162\r.sn"
  "n.PropType\022\020\n\010brain_id\030\003 \003(\005\022\021\n\thpara_va"
  "l\030\004 \003(\002\"*\n\027UpdateHyperParaResponse\022\017\n\007su"
  "ccess\030\001 \001(\010\";\n\023UpdateSampleRequest\022\020\n\010bl"
  "ock_id\030\001 \001(\005\022\022\n\nsample_idx\030\002 \003(\005\"\'\n\024Upda"
  "teSampleResponse\022\017\n\007success\030\001 \001(\010\"\021\n\017Shu"
  "tdownRequest\"$\n\020ShutdownResponse\022\020\n\010shut"
  "down\030\001 \001(\010*e\n\tSnnStatus\022\n\n\006SNN_OK\020\000\022\031\n\025S"
  "NN_INVALID_PARAMETER\020\001\022\034\n\030SNN_UNSET_SAMP"
  "LE_FAILURE\020\002\022\023\n\017SNN_UNSUPPORTED\020\003*\346\002\n\010Pr"
  "opType\022\021\n\rEXT_STIMULI_I\020\000\022\016\n\nMEMBRANE_C\020"
  "\001\022\t\n\005REF_T\020\002\022\r\n\tLEAKAGE_G\020\003\022\r\n\tLEAKAGE_V"
  "\020\004\022\017\n\013THRESHOLD_V\020\005\022\013\n\007RESET_V\020\006\022\022\n\016COND"
  "UCT_G_AMPA\020\007\022\022\n\016CONDUCT_G_NMDA\020\010\022\023\n\017COND"
  "UCT_G_GABAa\020\t\022\023\n\017CONDUCT_G_GABAb\020\n\022\023\n\017ME"
  "MBRANE_V_AMPA\020\013\022\023\n\017MEMBRANE_V_NMDA\020\014\022\024\n\020"
  "MEMBRANE_V_GABAa\020\r\022\024\n\020MEMBRANE_V_GABAb\020\016"
  "\022\014\n\010TAO_AMPA\020\017\022\014\n\010TAO_NMDA\020\020\022\r\n\tTAO_GABA"
  "a\020\021\022\r\n\tTAO_GABAb\020\022\022\016\n\nNOISE_RATE\020\0232\327\004\n\003S"
  "nn\022/\n\004Init\022\020.snn.InitRequest\032\021.snn.InitR"
  "esponse\"\0000\001\022,\n\003Run\022\017.snn.RunRequest\032\020.sn"
  "n.RunResponse\"\0000\001\0226\n\007Measure\022\022.snn.Metri"
  "cRequest\032\023.snn.MetricResponse\"\0000\001\022A\n\nUpd"
  "ateprop\022\026.snn.UpdatePropRequest\032\027.snn.Up"
  "datePropResponse\"\000(\001\022D\n\013Updategamma\022\027.sn"
  "n.UpdateGammaRequest\032\030.snn.UpdateGammaRe"
  "sponse\"\000(\001\022Z\n\025Updategammawithresult\022\027.sn"
  "n.UpdateGammaRequest\032\".snn.UpdateGammaWi"
  "thResultResponse\"\000(\0010\001\022P\n\017Updatehyperpar"
  "a\022\033.snn.UpdateHyperParaRequest\032\034.snn.Upd"
  "ateHyperParaResponse\"\000(\001\022G\n\014Updatesample"
  "\022\030.snn.UpdateSampleRequest\032\031.snn.UpdateS"
  "ampleResponse\"\000(\001\0229\n\010Shutdown\022\024.snn.Shut"
  "downRequest\032\025.snn.ShutdownResponse\"\000b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_snn_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_snn_2eproto_sccs[19] = {
  &scc_info_InitRequest_snn_2eproto.base,
  &scc_info_InitResponse_snn_2eproto.base,
  &scc_info_MetricInfo_snn_2eproto.base,
  &scc_info_MetricRequest_snn_2eproto.base,
  &scc_info_MetricResponse_snn_2eproto.base,
  &scc_info_RunRequest_snn_2eproto.base,
  &scc_info_RunResponse_snn_2eproto.base,
  &scc_info_ShutdownRequest_snn_2eproto.base,
  &scc_info_ShutdownResponse_snn_2eproto.base,
  &scc_info_SubblockInfo_snn_2eproto.base,
  &scc_info_UpdateGammaRequest_snn_2eproto.base,
  &scc_info_UpdateGammaResponse_snn_2eproto.base,
  &scc_info_UpdateGammaWithResultResponse_snn_2eproto.base,
  &scc_info_UpdateHyperParaRequest_snn_2eproto.base,
  &scc_info_UpdateHyperParaResponse_snn_2eproto.base,
  &scc_info_UpdatePropRequest_snn_2eproto.base,
  &scc_info_UpdatePropResponse_snn_2eproto.base,
  &scc_info_UpdateSampleRequest_snn_2eproto.base,
  &scc_info_UpdateSampleResponse_snn_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_snn_2eproto_once;
static bool descriptor_table_snn_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_snn_2eproto = {
  &descriptor_table_snn_2eproto_initialized, descriptor_table_protodef_snn_2eproto, "snn.proto", 3124,
  &descriptor_table_snn_2eproto_once, descriptor_table_snn_2eproto_sccs, descriptor_table_snn_2eproto_deps, 19, 0,
  schemas, file_default_instances, TableStruct_snn_2eproto::offsets,
  file_level_metadata_snn_2eproto, 19, file_level_enum_descriptors_snn_2eproto, file_level_service_descriptors_snn_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_snn_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_snn_2eproto), true);
namespace snn {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InitRequest_CommMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snn_2eproto);
  return file_level_enum_descriptors_snn_2eproto[0];
}
bool InitRequest_CommMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr InitRequest_CommMode InitRequest::COMM_POINT_TO_POINT;
constexpr InitRequest_CommMode InitRequest::COMM_ROUTE_WITHOUT_MERGE;
constexpr InitRequest_CommMode InitRequest::COMM_ROUTE_WITH_MERGE;
constexpr InitRequest_CommMode InitRequest::CommMode_MIN;
constexpr InitRequest_CommMode InitRequest::CommMode_MAX;
constexpr int InitRequest::CommMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RunRequest_Strategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snn_2eproto);
  return file_level_enum_descriptors_snn_2eproto[1];
}
bool RunRequest_Strategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr RunRequest_Strategy RunRequest::STRATEGY_SEND_SEQUENTIAL;
constexpr RunRequest_Strategy RunRequest::STRATEGY_SEND_PAIRWISE;
constexpr RunRequest_Strategy RunRequest::STRATEGY_SEND_RANDOM;
constexpr RunRequest_Strategy RunRequest::Strategy_MIN;
constexpr RunRequest_Strategy RunRequest::Strategy_MAX;
constexpr int RunRequest::Strategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SnnStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snn_2eproto);
  return file_level_enum_descriptors_snn_2eproto[2];
}
bool SnnStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_snn_2eproto);
  return file_level_enum_descriptors_snn_2eproto[3];
}
bool PropType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void InitRequest::InitAsDefaultInstance() {
}
class InitRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRequest::kFilePathFieldNumber;
const int InitRequest::kRoutePathFieldNumber;
const int InitRequest::kDeltaTFieldNumber;
const int InitRequest::kModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRequest::InitRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.InitRequest)
}
InitRequest::InitRequest(const InitRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  route_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.route_path().size() > 0) {
    route_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_path_);
  }
  ::memcpy(&delta_t_, &from.delta_t_,
    static_cast<size_t>(reinterpret_cast<char*>(&mode_) -
    reinterpret_cast<char*>(&delta_t_)) + sizeof(mode_));
  // @@protoc_insertion_point(copy_constructor:snn.InitRequest)
}

void InitRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitRequest_snn_2eproto.base);
  file_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&delta_t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&delta_t_)) + sizeof(mode_));
}

InitRequest::~InitRequest() {
  // @@protoc_insertion_point(destructor:snn.InitRequest)
  SharedDtor();
}

void InitRequest::SharedDtor() {
  file_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InitRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitRequest& InitRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitRequest_snn_2eproto.base);
  return *internal_default_instance();
}


void InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.InitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  route_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&delta_t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mode_) -
      reinterpret_cast<char*>(&delta_t_)) + sizeof(mode_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_file_path(), ptr, ctx, "snn.InitRequest.file_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string route_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_route_path(), ptr, ctx, "snn.InitRequest.route_path");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float delta_t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          delta_t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .snn.InitRequest.CommMode mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_mode(static_cast<::snn::InitRequest_CommMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.InitRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string file_path = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), static_cast<int>(this->file_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "snn.InitRequest.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string route_path = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_route_path()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->route_path().data(), static_cast<int>(this->route_path().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "snn.InitRequest.route_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float delta_t = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (29 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .snn.InitRequest.CommMode mode = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::snn::InitRequest_CommMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.InitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.InitRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.InitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snn.InitRequest.file_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_path(), output);
  }

  // string route_path = 2;
  if (this->route_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->route_path().data(), static_cast<int>(this->route_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snn.InitRequest.route_path");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->route_path(), output);
  }

  // float delta_t = 3;
  if (!(this->delta_t() <= 0 && this->delta_t() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(3, this->delta_t(), output);
  }

  // .snn.InitRequest.CommMode mode = 4;
  if (this->mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->mode(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.InitRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.InitRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snn.InitRequest.file_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->file_path(), target);
  }

  // string route_path = 2;
  if (this->route_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->route_path().data(), static_cast<int>(this->route_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snn.InitRequest.route_path");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->route_path(), target);
  }

  // float delta_t = 3;
  if (!(this->delta_t() <= 0 && this->delta_t() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->delta_t(), target);
  }

  // .snn.InitRequest.CommMode mode = 4;
  if (this->mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->mode(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.InitRequest)
  return target;
}

size_t InitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.InitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_path = 1;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // string route_path = 2;
  if (this->route_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->route_path());
  }

  // float delta_t = 3;
  if (!(this->delta_t() <= 0 && this->delta_t() >= 0)) {
    total_size += 1 + 4;
  }

  // .snn.InitRequest.CommMode mode = 4;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.InitRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.InitRequest)
    MergeFrom(*source);
  }
}

void InitRequest::MergeFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.route_path().size() > 0) {

    route_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.route_path_);
  }
  if (!(from.delta_t() <= 0 && from.delta_t() >= 0)) {
    set_delta_t(from.delta_t());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void InitRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRequest::CopyFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRequest::IsInitialized() const {
  return true;
}

void InitRequest::Swap(InitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRequest::InternalSwap(InitRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_path_.Swap(&other->file_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  route_path_.Swap(&other->route_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(delta_t_, other->delta_t_);
  swap(mode_, other->mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubblockInfo::InitAsDefaultInstance() {
}
class SubblockInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SubblockInfo::kSubblkIdFieldNumber;
const int SubblockInfo::kSubblkNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubblockInfo::SubblockInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.SubblockInfo)
}
SubblockInfo::SubblockInfo(const SubblockInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&subblk_id_, &from.subblk_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&subblk_num_) -
    reinterpret_cast<char*>(&subblk_id_)) + sizeof(subblk_num_));
  // @@protoc_insertion_point(copy_constructor:snn.SubblockInfo)
}

void SubblockInfo::SharedCtor() {
  ::memset(&subblk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subblk_num_) -
      reinterpret_cast<char*>(&subblk_id_)) + sizeof(subblk_num_));
}

SubblockInfo::~SubblockInfo() {
  // @@protoc_insertion_point(destructor:snn.SubblockInfo)
  SharedDtor();
}

void SubblockInfo::SharedDtor() {
}

void SubblockInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubblockInfo& SubblockInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubblockInfo_snn_2eproto.base);
  return *internal_default_instance();
}


void SubblockInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.SubblockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&subblk_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subblk_num_) -
      reinterpret_cast<char*>(&subblk_id_)) + sizeof(subblk_num_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubblockInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 subblk_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          subblk_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 subblk_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          subblk_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubblockInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.SubblockInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 subblk_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &subblk_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 subblk_num = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &subblk_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.SubblockInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.SubblockInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SubblockInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.SubblockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 subblk_id = 1;
  if (this->subblk_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->subblk_id(), output);
  }

  // int32 subblk_num = 2;
  if (this->subblk_num() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->subblk_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.SubblockInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* SubblockInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.SubblockInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 subblk_id = 1;
  if (this->subblk_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->subblk_id(), target);
  }

  // int32 subblk_num = 2;
  if (this->subblk_num() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->subblk_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.SubblockInfo)
  return target;
}

size_t SubblockInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.SubblockInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 subblk_id = 1;
  if (this->subblk_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->subblk_id());
  }

  // int32 subblk_num = 2;
  if (this->subblk_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->subblk_num());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubblockInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.SubblockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SubblockInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubblockInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.SubblockInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.SubblockInfo)
    MergeFrom(*source);
  }
}

void SubblockInfo::MergeFrom(const SubblockInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.SubblockInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subblk_id() != 0) {
    set_subblk_id(from.subblk_id());
  }
  if (from.subblk_num() != 0) {
    set_subblk_num(from.subblk_num());
  }
}

void SubblockInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.SubblockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubblockInfo::CopyFrom(const SubblockInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.SubblockInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubblockInfo::IsInitialized() const {
  return true;
}

void SubblockInfo::Swap(SubblockInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubblockInfo::InternalSwap(SubblockInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(subblk_id_, other->subblk_id_);
  swap(subblk_num_, other->subblk_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubblockInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitResponse::InitAsDefaultInstance() {
}
class InitResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitResponse::kStatusFieldNumber;
const int InitResponse::kBlockIdFieldNumber;
const int InitResponse::kNeuronsPerBlockFieldNumber;
const int InitResponse::kSubblkInfoFieldNumber;
const int InitResponse::kUsedCpuMemFieldNumber;
const int InitResponse::kTotalGpuMemFieldNumber;
const int InitResponse::kUsedGpuMemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitResponse::InitResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.InitResponse)
}
InitResponse::InitResponse(const InitResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subblk_info_(from.subblk_info_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&neurons_per_block_) -
    reinterpret_cast<char*>(&status_)) + sizeof(neurons_per_block_));
  // @@protoc_insertion_point(copy_constructor:snn.InitResponse)
}

void InitResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitResponse_snn_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neurons_per_block_) -
      reinterpret_cast<char*>(&status_)) + sizeof(neurons_per_block_));
}

InitResponse::~InitResponse() {
  // @@protoc_insertion_point(destructor:snn.InitResponse)
  SharedDtor();
}

void InitResponse::SharedDtor() {
}

void InitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitResponse& InitResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitResponse_snn_2eproto.base);
  return *internal_default_instance();
}


void InitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.InitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subblk_info_.Clear();
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&neurons_per_block_) -
      reinterpret_cast<char*>(&status_)) + sizeof(neurons_per_block_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* InitResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .snn.SnnStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::snn::SnnStatus>(val));
        } else goto handle_unusual;
        continue;
      // int32 block_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 neurons_per_block = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          neurons_per_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .snn.SubblockInfo subblk_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_subblk_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // double used_cpu_mem = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          used_cpu_mem_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double total_gpu_mem = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          total_gpu_mem_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double used_gpu_mem = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          used_gpu_mem_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool InitResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.InitResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .snn.SnnStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::snn::SnnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 block_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 neurons_per_block = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &neurons_per_block_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .snn.SubblockInfo subblk_info = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_subblk_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double used_cpu_mem = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &used_cpu_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_gpu_mem = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (49 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_gpu_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double used_gpu_mem = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (57 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &used_gpu_mem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.InitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.InitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void InitResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.InitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snn.SnnStatus status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // int32 block_id = 2;
  if (this->block_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->block_id(), output);
  }

  // int32 neurons_per_block = 3;
  if (this->neurons_per_block() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->neurons_per_block(), output);
  }

  // repeated .snn.SubblockInfo subblk_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subblk_info_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->subblk_info(static_cast<int>(i)),
      output);
  }

  // double used_cpu_mem = 5;
  if (!(this->used_cpu_mem() <= 0 && this->used_cpu_mem() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->used_cpu_mem(), output);
  }

  // double total_gpu_mem = 6;
  if (!(this->total_gpu_mem() <= 0 && this->total_gpu_mem() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(6, this->total_gpu_mem(), output);
  }

  // double used_gpu_mem = 7;
  if (!(this->used_gpu_mem() <= 0 && this->used_gpu_mem() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(7, this->used_gpu_mem(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.InitResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* InitResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.InitResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snn.SnnStatus status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // int32 block_id = 2;
  if (this->block_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->block_id(), target);
  }

  // int32 neurons_per_block = 3;
  if (this->neurons_per_block() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->neurons_per_block(), target);
  }

  // repeated .snn.SubblockInfo subblk_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subblk_info_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->subblk_info(static_cast<int>(i)), target);
  }

  // double used_cpu_mem = 5;
  if (!(this->used_cpu_mem() <= 0 && this->used_cpu_mem() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->used_cpu_mem(), target);
  }

  // double total_gpu_mem = 6;
  if (!(this->total_gpu_mem() <= 0 && this->total_gpu_mem() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->total_gpu_mem(), target);
  }

  // double used_gpu_mem = 7;
  if (!(this->used_gpu_mem() <= 0 && this->used_gpu_mem() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->used_gpu_mem(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.InitResponse)
  return target;
}

size_t InitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.InitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snn.SubblockInfo subblk_info = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->subblk_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->subblk_info(static_cast<int>(i)));
    }
  }

  // .snn.SnnStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  // int32 block_id = 2;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->block_id());
  }

  // double used_cpu_mem = 5;
  if (!(this->used_cpu_mem() <= 0 && this->used_cpu_mem() >= 0)) {
    total_size += 1 + 8;
  }

  // double total_gpu_mem = 6;
  if (!(this->total_gpu_mem() <= 0 && this->total_gpu_mem() >= 0)) {
    total_size += 1 + 8;
  }

  // double used_gpu_mem = 7;
  if (!(this->used_gpu_mem() <= 0 && this->used_gpu_mem() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 neurons_per_block = 3;
  if (this->neurons_per_block() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->neurons_per_block());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.InitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const InitResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.InitResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.InitResponse)
    MergeFrom(*source);
  }
}

void InitResponse::MergeFrom(const InitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.InitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subblk_info_.MergeFrom(from.subblk_info_);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
  if (!(from.used_cpu_mem() <= 0 && from.used_cpu_mem() >= 0)) {
    set_used_cpu_mem(from.used_cpu_mem());
  }
  if (!(from.total_gpu_mem() <= 0 && from.total_gpu_mem() >= 0)) {
    set_total_gpu_mem(from.total_gpu_mem());
  }
  if (!(from.used_gpu_mem() <= 0 && from.used_gpu_mem() >= 0)) {
    set_used_gpu_mem(from.used_gpu_mem());
  }
  if (from.neurons_per_block() != 0) {
    set_neurons_per_block(from.neurons_per_block());
  }
}

void InitResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.InitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitResponse::CopyFrom(const InitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.InitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitResponse::IsInitialized() const {
  return true;
}

void InitResponse::Swap(InitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitResponse::InternalSwap(InitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&subblk_info_)->InternalSwap(CastToBase(&other->subblk_info_));
  swap(status_, other->status_);
  swap(block_id_, other->block_id_);
  swap(used_cpu_mem_, other->used_cpu_mem_);
  swap(total_gpu_mem_, other->total_gpu_mem_);
  swap(used_gpu_mem_, other->used_gpu_mem_);
  swap(neurons_per_block_, other->neurons_per_block_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunRequest::InitAsDefaultInstance() {
}
class RunRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunRequest::kIterFieldNumber;
const int RunRequest::kIterOffsetFieldNumber;
const int RunRequest::kOutputFreqFieldNumber;
const int RunRequest::kOutputVmeanFieldNumber;
const int RunRequest::kOutputSampleFieldNumber;
const int RunRequest::kStrategyFieldNumber;
const int RunRequest::kOutputImeanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunRequest::RunRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.RunRequest)
}
RunRequest::RunRequest(const RunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&iter_, &from.iter_,
    static_cast<size_t>(reinterpret_cast<char*>(&strategy_) -
    reinterpret_cast<char*>(&iter_)) + sizeof(strategy_));
  // @@protoc_insertion_point(copy_constructor:snn.RunRequest)
}

void RunRequest::SharedCtor() {
  ::memset(&iter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strategy_) -
      reinterpret_cast<char*>(&iter_)) + sizeof(strategy_));
}

RunRequest::~RunRequest() {
  // @@protoc_insertion_point(destructor:snn.RunRequest)
  SharedDtor();
}

void RunRequest::SharedDtor() {
}

void RunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunRequest& RunRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunRequest_snn_2eproto.base);
  return *internal_default_instance();
}


void RunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.RunRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&iter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&strategy_) -
      reinterpret_cast<char*>(&iter_)) + sizeof(strategy_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 iter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          iter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 iter_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          iter_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool output_freq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          output_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool output_vmean = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          output_vmean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool output_sample = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          output_sample_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snn.RunRequest.Strategy strategy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_strategy(static_cast<::snn::RunRequest_Strategy>(val));
        } else goto handle_unusual;
        continue;
      // bool output_imean = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          output_imean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.RunRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 iter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 iter_offset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &iter_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool output_freq = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_freq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool output_vmean = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_vmean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool output_sample = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_sample_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .snn.RunRequest.Strategy strategy = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_strategy(static_cast< ::snn::RunRequest_Strategy >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool output_imean = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &output_imean_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.RunRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.RunRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.RunRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iter = 1;
  if (this->iter() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->iter(), output);
  }

  // int32 iter_offset = 2;
  if (this->iter_offset() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->iter_offset(), output);
  }

  // bool output_freq = 3;
  if (this->output_freq() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->output_freq(), output);
  }

  // bool output_vmean = 4;
  if (this->output_vmean() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(4, this->output_vmean(), output);
  }

  // bool output_sample = 5;
  if (this->output_sample() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->output_sample(), output);
  }

  // .snn.RunRequest.Strategy strategy = 6;
  if (this->strategy() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->strategy(), output);
  }

  // bool output_imean = 7;
  if (this->output_imean() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->output_imean(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.RunRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* RunRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.RunRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 iter = 1;
  if (this->iter() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->iter(), target);
  }

  // int32 iter_offset = 2;
  if (this->iter_offset() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->iter_offset(), target);
  }

  // bool output_freq = 3;
  if (this->output_freq() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->output_freq(), target);
  }

  // bool output_vmean = 4;
  if (this->output_vmean() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->output_vmean(), target);
  }

  // bool output_sample = 5;
  if (this->output_sample() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->output_sample(), target);
  }

  // .snn.RunRequest.Strategy strategy = 6;
  if (this->strategy() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->strategy(), target);
  }

  // bool output_imean = 7;
  if (this->output_imean() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->output_imean(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.RunRequest)
  return target;
}

size_t RunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.RunRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 iter = 1;
  if (this->iter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->iter());
  }

  // int32 iter_offset = 2;
  if (this->iter_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->iter_offset());
  }

  // bool output_freq = 3;
  if (this->output_freq() != 0) {
    total_size += 1 + 1;
  }

  // bool output_vmean = 4;
  if (this->output_vmean() != 0) {
    total_size += 1 + 1;
  }

  // bool output_sample = 5;
  if (this->output_sample() != 0) {
    total_size += 1 + 1;
  }

  // bool output_imean = 7;
  if (this->output_imean() != 0) {
    total_size += 1 + 1;
  }

  // .snn.RunRequest.Strategy strategy = 6;
  if (this->strategy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->strategy());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.RunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.RunRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.RunRequest)
    MergeFrom(*source);
  }
}

void RunRequest::MergeFrom(const RunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.RunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.iter() != 0) {
    set_iter(from.iter());
  }
  if (from.iter_offset() != 0) {
    set_iter_offset(from.iter_offset());
  }
  if (from.output_freq() != 0) {
    set_output_freq(from.output_freq());
  }
  if (from.output_vmean() != 0) {
    set_output_vmean(from.output_vmean());
  }
  if (from.output_sample() != 0) {
    set_output_sample(from.output_sample());
  }
  if (from.output_imean() != 0) {
    set_output_imean(from.output_imean());
  }
  if (from.strategy() != 0) {
    set_strategy(from.strategy());
  }
}

void RunRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.RunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunRequest::CopyFrom(const RunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.RunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunRequest::IsInitialized() const {
  return true;
}

void RunRequest::Swap(RunRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunRequest::InternalSwap(RunRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(iter_, other->iter_);
  swap(iter_offset_, other->iter_offset_);
  swap(output_freq_, other->output_freq_);
  swap(output_vmean_, other->output_vmean_);
  swap(output_sample_, other->output_sample_);
  swap(output_imean_, other->output_imean_);
  swap(strategy_, other->strategy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RunResponse::InitAsDefaultInstance() {
}
class RunResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunResponse::kStatusFieldNumber;
const int RunResponse::kFreqFieldNumber;
const int RunResponse::kVmeanFieldNumber;
const int RunResponse::kSampleSpikeFieldNumber;
const int RunResponse::kSampleVmembFieldNumber;
const int RunResponse::kImeanFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunResponse::RunResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.RunResponse)
}
RunResponse::RunResponse(const RunResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      freq_(from.freq_),
      vmean_(from.vmean_),
      sample_spike_(from.sample_spike_),
      sample_vmemb_(from.sample_vmemb_),
      imean_(from.imean_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:snn.RunResponse)
}

void RunResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RunResponse_snn_2eproto.base);
  status_ = 0;
}

RunResponse::~RunResponse() {
  // @@protoc_insertion_point(destructor:snn.RunResponse)
  SharedDtor();
}

void RunResponse::SharedDtor() {
}

void RunResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RunResponse& RunResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RunResponse_snn_2eproto.base);
  return *internal_default_instance();
}


void RunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.RunResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  freq_.Clear();
  vmean_.Clear();
  sample_spike_.Clear();
  sample_vmemb_.Clear();
  imean_.Clear();
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RunResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .snn.SnnStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::snn::SnnStatus>(val));
        } else goto handle_unusual;
        continue;
      // repeated bytes freq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_freq(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated bytes vmean = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_vmean(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      // repeated bytes sample_spike = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_sample_spike(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      // repeated bytes sample_vmemb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_sample_vmemb(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated bytes imean = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_imean(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RunResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.RunResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .snn.SnnStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::snn::SnnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes freq = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_freq()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes vmean = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_vmean()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes sample_spike = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_sample_spike()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes sample_vmemb = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_sample_vmemb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes imean = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_imean()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.RunResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.RunResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RunResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.RunResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snn.SnnStatus status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated bytes freq = 2;
  for (int i = 0, n = this->freq_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      2, this->freq(i), output);
  }

  // repeated bytes vmean = 3;
  for (int i = 0, n = this->vmean_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      3, this->vmean(i), output);
  }

  // repeated bytes sample_spike = 4;
  for (int i = 0, n = this->sample_spike_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      4, this->sample_spike(i), output);
  }

  // repeated bytes sample_vmemb = 5;
  for (int i = 0, n = this->sample_vmemb_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      5, this->sample_vmemb(i), output);
  }

  // repeated bytes imean = 6;
  for (int i = 0, n = this->imean_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      6, this->imean(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.RunResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* RunResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.RunResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snn.SnnStatus status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated bytes freq = 2;
  for (int i = 0, n = this->freq_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(2, this->freq(i), target);
  }

  // repeated bytes vmean = 3;
  for (int i = 0, n = this->vmean_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(3, this->vmean(i), target);
  }

  // repeated bytes sample_spike = 4;
  for (int i = 0, n = this->sample_spike_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(4, this->sample_spike(i), target);
  }

  // repeated bytes sample_vmemb = 5;
  for (int i = 0, n = this->sample_vmemb_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(5, this->sample_vmemb(i), target);
  }

  // repeated bytes imean = 6;
  for (int i = 0, n = this->imean_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(6, this->imean(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.RunResponse)
  return target;
}

size_t RunResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.RunResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes freq = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->freq_size());
  for (int i = 0, n = this->freq_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->freq(i));
  }

  // repeated bytes vmean = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->vmean_size());
  for (int i = 0, n = this->vmean_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->vmean(i));
  }

  // repeated bytes sample_spike = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->sample_spike_size());
  for (int i = 0, n = this->sample_spike_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->sample_spike(i));
  }

  // repeated bytes sample_vmemb = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->sample_vmemb_size());
  for (int i = 0, n = this->sample_vmemb_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->sample_vmemb(i));
  }

  // repeated bytes imean = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->imean_size());
  for (int i = 0, n = this->imean_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->imean(i));
  }

  // .snn.SnnStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.RunResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RunResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.RunResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.RunResponse)
    MergeFrom(*source);
  }
}

void RunResponse::MergeFrom(const RunResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.RunResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  freq_.MergeFrom(from.freq_);
  vmean_.MergeFrom(from.vmean_);
  sample_spike_.MergeFrom(from.sample_spike_);
  sample_vmemb_.MergeFrom(from.sample_vmemb_);
  imean_.MergeFrom(from.imean_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void RunResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.RunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunResponse::CopyFrom(const RunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.RunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunResponse::IsInitialized() const {
  return true;
}

void RunResponse::Swap(RunResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunResponse::InternalSwap(RunResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  freq_.InternalSwap(CastToBase(&other->freq_));
  vmean_.InternalSwap(CastToBase(&other->vmean_));
  sample_spike_.InternalSwap(CastToBase(&other->sample_spike_));
  sample_vmemb_.InternalSwap(CastToBase(&other->sample_vmemb_));
  imean_.InternalSwap(CastToBase(&other->imean_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetricRequest::InitAsDefaultInstance() {
}
class MetricRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricRequest::MetricRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.MetricRequest)
}
MetricRequest::MetricRequest(const MetricRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snn.MetricRequest)
}

void MetricRequest::SharedCtor() {
}

MetricRequest::~MetricRequest() {
  // @@protoc_insertion_point(destructor:snn.MetricRequest)
  SharedDtor();
}

void MetricRequest::SharedDtor() {
}

void MetricRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricRequest& MetricRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricRequest_snn_2eproto.base);
  return *internal_default_instance();
}


void MetricRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.MetricRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetricRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetricRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.MetricRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:snn.MetricRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.MetricRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetricRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.MetricRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.MetricRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.MetricRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.MetricRequest)
  return target;
}

size_t MetricRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.MetricRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.MetricRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.MetricRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.MetricRequest)
    MergeFrom(*source);
  }
}

void MetricRequest::MergeFrom(const MetricRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.MetricRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void MetricRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.MetricRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricRequest::CopyFrom(const MetricRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.MetricRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricRequest::IsInitialized() const {
  return true;
}

void MetricRequest::Swap(MetricRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricRequest::InternalSwap(MetricRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetricInfo::InitAsDefaultInstance() {
}
class MetricInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricInfo::kNameFieldNumber;
const int MetricInfo::kComputingDurationFieldNumber;
const int MetricInfo::kReportingDurationFieldNumber;
const int MetricInfo::kDurationInterNodeFieldNumber;
const int MetricInfo::kDurationIntraNodeFieldNumber;
const int MetricInfo::kSendingByteSizeInterNodeFieldNumber;
const int MetricInfo::kSendingByteSizeIntraNodeFieldNumber;
const int MetricInfo::kRecvingByteSizeInterNodeFieldNumber;
const int MetricInfo::kRecvingByteSizeIntraNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricInfo::MetricInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.MetricInfo)
}
MetricInfo::MetricInfo(const MetricInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&computing_duration_, &from.computing_duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&recving_byte_size_intra_node_) -
    reinterpret_cast<char*>(&computing_duration_)) + sizeof(recving_byte_size_intra_node_));
  // @@protoc_insertion_point(copy_constructor:snn.MetricInfo)
}

void MetricInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricInfo_snn_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&computing_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recving_byte_size_intra_node_) -
      reinterpret_cast<char*>(&computing_duration_)) + sizeof(recving_byte_size_intra_node_));
}

MetricInfo::~MetricInfo() {
  // @@protoc_insertion_point(destructor:snn.MetricInfo)
  SharedDtor();
}

void MetricInfo::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetricInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricInfo& MetricInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricInfo_snn_2eproto.base);
  return *internal_default_instance();
}


void MetricInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.MetricInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&computing_duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recving_byte_size_intra_node_) -
      reinterpret_cast<char*>(&computing_duration_)) + sizeof(recving_byte_size_intra_node_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetricInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_name(), ptr, ctx, "snn.MetricInfo.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double computing_duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          computing_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double reporting_duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          reporting_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double duration_inter_node = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          duration_inter_node_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double duration_intra_node = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          duration_intra_node_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 sending_byte_size_inter_node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sending_byte_size_inter_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 sending_byte_size_intra_node = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sending_byte_size_intra_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 recving_byte_size_inter_node = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          recving_byte_size_inter_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 recving_byte_size_intra_node = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          recving_byte_size_intra_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetricInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.MetricInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "snn.MetricInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double computing_duration = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &computing_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double reporting_duration = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &reporting_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double duration_inter_node = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_inter_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double duration_intra_node = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (41 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &duration_intra_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sending_byte_size_inter_node = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sending_byte_size_inter_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 sending_byte_size_intra_node = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sending_byte_size_intra_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 recving_byte_size_inter_node = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recving_byte_size_inter_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 recving_byte_size_intra_node = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recving_byte_size_intra_node_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.MetricInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.MetricInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetricInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.MetricInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snn.MetricInfo.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // double computing_duration = 2;
  if (!(this->computing_duration() <= 0 && this->computing_duration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->computing_duration(), output);
  }

  // double reporting_duration = 3;
  if (!(this->reporting_duration() <= 0 && this->reporting_duration() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->reporting_duration(), output);
  }

  // double duration_inter_node = 4;
  if (!(this->duration_inter_node() <= 0 && this->duration_inter_node() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->duration_inter_node(), output);
  }

  // double duration_intra_node = 5;
  if (!(this->duration_intra_node() <= 0 && this->duration_intra_node() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(5, this->duration_intra_node(), output);
  }

  // uint64 sending_byte_size_inter_node = 6;
  if (this->sending_byte_size_inter_node() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->sending_byte_size_inter_node(), output);
  }

  // uint64 sending_byte_size_intra_node = 7;
  if (this->sending_byte_size_intra_node() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->sending_byte_size_intra_node(), output);
  }

  // uint64 recving_byte_size_inter_node = 8;
  if (this->recving_byte_size_inter_node() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->recving_byte_size_inter_node(), output);
  }

  // uint64 recving_byte_size_intra_node = 9;
  if (this->recving_byte_size_intra_node() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->recving_byte_size_intra_node(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.MetricInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.MetricInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "snn.MetricInfo.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // double computing_duration = 2;
  if (!(this->computing_duration() <= 0 && this->computing_duration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->computing_duration(), target);
  }

  // double reporting_duration = 3;
  if (!(this->reporting_duration() <= 0 && this->reporting_duration() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->reporting_duration(), target);
  }

  // double duration_inter_node = 4;
  if (!(this->duration_inter_node() <= 0 && this->duration_inter_node() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->duration_inter_node(), target);
  }

  // double duration_intra_node = 5;
  if (!(this->duration_intra_node() <= 0 && this->duration_intra_node() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->duration_intra_node(), target);
  }

  // uint64 sending_byte_size_inter_node = 6;
  if (this->sending_byte_size_inter_node() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->sending_byte_size_inter_node(), target);
  }

  // uint64 sending_byte_size_intra_node = 7;
  if (this->sending_byte_size_intra_node() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->sending_byte_size_intra_node(), target);
  }

  // uint64 recving_byte_size_inter_node = 8;
  if (this->recving_byte_size_inter_node() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->recving_byte_size_inter_node(), target);
  }

  // uint64 recving_byte_size_intra_node = 9;
  if (this->recving_byte_size_intra_node() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->recving_byte_size_intra_node(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.MetricInfo)
  return target;
}

size_t MetricInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.MetricInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  // double computing_duration = 2;
  if (!(this->computing_duration() <= 0 && this->computing_duration() >= 0)) {
    total_size += 1 + 8;
  }

  // double reporting_duration = 3;
  if (!(this->reporting_duration() <= 0 && this->reporting_duration() >= 0)) {
    total_size += 1 + 8;
  }

  // double duration_inter_node = 4;
  if (!(this->duration_inter_node() <= 0 && this->duration_inter_node() >= 0)) {
    total_size += 1 + 8;
  }

  // double duration_intra_node = 5;
  if (!(this->duration_intra_node() <= 0 && this->duration_intra_node() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 sending_byte_size_inter_node = 6;
  if (this->sending_byte_size_inter_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sending_byte_size_inter_node());
  }

  // uint64 sending_byte_size_intra_node = 7;
  if (this->sending_byte_size_intra_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->sending_byte_size_intra_node());
  }

  // uint64 recving_byte_size_inter_node = 8;
  if (this->recving_byte_size_inter_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->recving_byte_size_inter_node());
  }

  // uint64 recving_byte_size_intra_node = 9;
  if (this->recving_byte_size_intra_node() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->recving_byte_size_intra_node());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.MetricInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.MetricInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.MetricInfo)
    MergeFrom(*source);
  }
}

void MetricInfo::MergeFrom(const MetricInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.MetricInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (!(from.computing_duration() <= 0 && from.computing_duration() >= 0)) {
    set_computing_duration(from.computing_duration());
  }
  if (!(from.reporting_duration() <= 0 && from.reporting_duration() >= 0)) {
    set_reporting_duration(from.reporting_duration());
  }
  if (!(from.duration_inter_node() <= 0 && from.duration_inter_node() >= 0)) {
    set_duration_inter_node(from.duration_inter_node());
  }
  if (!(from.duration_intra_node() <= 0 && from.duration_intra_node() >= 0)) {
    set_duration_intra_node(from.duration_intra_node());
  }
  if (from.sending_byte_size_inter_node() != 0) {
    set_sending_byte_size_inter_node(from.sending_byte_size_inter_node());
  }
  if (from.sending_byte_size_intra_node() != 0) {
    set_sending_byte_size_intra_node(from.sending_byte_size_intra_node());
  }
  if (from.recving_byte_size_inter_node() != 0) {
    set_recving_byte_size_inter_node(from.recving_byte_size_inter_node());
  }
  if (from.recving_byte_size_intra_node() != 0) {
    set_recving_byte_size_intra_node(from.recving_byte_size_intra_node());
  }
}

void MetricInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.MetricInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricInfo::CopyFrom(const MetricInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.MetricInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricInfo::IsInitialized() const {
  return true;
}

void MetricInfo::Swap(MetricInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricInfo::InternalSwap(MetricInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(computing_duration_, other->computing_duration_);
  swap(reporting_duration_, other->reporting_duration_);
  swap(duration_inter_node_, other->duration_inter_node_);
  swap(duration_intra_node_, other->duration_intra_node_);
  swap(sending_byte_size_inter_node_, other->sending_byte_size_inter_node_);
  swap(sending_byte_size_intra_node_, other->sending_byte_size_intra_node_);
  swap(recving_byte_size_inter_node_, other->recving_byte_size_inter_node_);
  swap(recving_byte_size_intra_node_, other->recving_byte_size_intra_node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetricResponse::InitAsDefaultInstance() {
}
class MetricResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetricResponse::kStatusFieldNumber;
const int MetricResponse::kMetricFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetricResponse::MetricResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.MetricResponse)
}
MetricResponse::MetricResponse(const MetricResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      metric_(from.metric_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:snn.MetricResponse)
}

void MetricResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricResponse_snn_2eproto.base);
  status_ = 0;
}

MetricResponse::~MetricResponse() {
  // @@protoc_insertion_point(destructor:snn.MetricResponse)
  SharedDtor();
}

void MetricResponse::SharedDtor() {
}

void MetricResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricResponse& MetricResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricResponse_snn_2eproto.base);
  return *internal_default_instance();
}


void MetricResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.MetricResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  metric_.Clear();
  status_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MetricResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .snn.SnnStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_status(static_cast<::snn::SnnStatus>(val));
        } else goto handle_unusual;
        continue;
      // repeated .snn.MetricInfo metric = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_metric(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MetricResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.MetricResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .snn.SnnStatus status = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_status(static_cast< ::snn::SnnStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .snn.MetricInfo metric = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.MetricResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.MetricResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void MetricResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.MetricResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snn.SnnStatus status = 1;
  if (this->status() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // repeated .snn.MetricInfo metric = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->metric(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.MetricResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.MetricResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .snn.SnnStatus status = 1;
  if (this->status() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // repeated .snn.MetricInfo metric = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->metric_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->metric(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.MetricResponse)
  return target;
}

size_t MetricResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.MetricResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snn.MetricInfo metric = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->metric_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->metric(static_cast<int>(i)));
    }
  }

  // .snn.SnnStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.MetricResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.MetricResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.MetricResponse)
    MergeFrom(*source);
  }
}

void MetricResponse::MergeFrom(const MetricResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.MetricResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  metric_.MergeFrom(from.metric_);
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void MetricResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.MetricResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricResponse::CopyFrom(const MetricResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.MetricResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricResponse::IsInitialized() const {
  return true;
}

void MetricResponse::Swap(MetricResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetricResponse::InternalSwap(MetricResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&metric_)->InternalSwap(CastToBase(&other->metric_));
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePropRequest::InitAsDefaultInstance() {
}
class UpdatePropRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdatePropRequest::kBlockIdFieldNumber;
const int UpdatePropRequest::kNeuronIdFieldNumber;
const int UpdatePropRequest::kPropIdFieldNumber;
const int UpdatePropRequest::kPropValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdatePropRequest::UpdatePropRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.UpdatePropRequest)
}
UpdatePropRequest::UpdatePropRequest(const UpdatePropRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      neuron_id_(from.neuron_id_),
      prop_id_(from.prop_id_),
      prop_val_(from.prop_val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_ = from.block_id_;
  // @@protoc_insertion_point(copy_constructor:snn.UpdatePropRequest)
}

void UpdatePropRequest::SharedCtor() {
  block_id_ = 0;
}

UpdatePropRequest::~UpdatePropRequest() {
  // @@protoc_insertion_point(destructor:snn.UpdatePropRequest)
  SharedDtor();
}

void UpdatePropRequest::SharedDtor() {
}

void UpdatePropRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePropRequest& UpdatePropRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePropRequest_snn_2eproto.base);
  return *internal_default_instance();
}


void UpdatePropRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.UpdatePropRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neuron_id_.Clear();
  prop_id_.Clear();
  prop_val_.Clear();
  block_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdatePropRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 neuron_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_neuron_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_neuron_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .snn.PropType prop_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_prop_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_prop_id(static_cast<::snn::PropType>(val));
        } else goto handle_unusual;
        continue;
      // repeated float prop_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_prop_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_prop_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdatePropRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.UpdatePropRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 neuron_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_neuron_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_neuron_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .snn.PropType prop_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_prop_id(static_cast< ::snn::PropType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_prop_id(static_cast< ::snn::PropType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float prop_val = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_prop_val())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_prop_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.UpdatePropRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.UpdatePropRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdatePropRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.UpdatePropRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->block_id(), output);
  }

  // repeated int32 neuron_id = 2;
  if (this->neuron_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_neuron_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->neuron_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->neuron_id(i), output);
  }

  // repeated .snn.PropType prop_id = 3;
  if (this->prop_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_prop_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->prop_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->prop_id(i), output);
  }

  // repeated float prop_val = 4;
  if (this->prop_val_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_prop_val_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->prop_val().data(), this->prop_val_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.UpdatePropRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePropRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.UpdatePropRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->block_id(), target);
  }

  // repeated int32 neuron_id = 2;
  if (this->neuron_id_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _neuron_id_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->neuron_id_, target);
  }

  // repeated .snn.PropType prop_id = 3;
  if (this->prop_id_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _prop_id_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->prop_id_, target);
  }

  // repeated float prop_val = 4;
  if (this->prop_val_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _prop_val_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->prop_val_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.UpdatePropRequest)
  return target;
}

size_t UpdatePropRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.UpdatePropRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 neuron_id = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->neuron_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _neuron_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .snn.PropType prop_id = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->prop_id_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->prop_id(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _prop_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float prop_val = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->prop_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _prop_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePropRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.UpdatePropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePropRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePropRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.UpdatePropRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.UpdatePropRequest)
    MergeFrom(*source);
  }
}

void UpdatePropRequest::MergeFrom(const UpdatePropRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.UpdatePropRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  neuron_id_.MergeFrom(from.neuron_id_);
  prop_id_.MergeFrom(from.prop_id_);
  prop_val_.MergeFrom(from.prop_val_);
  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
}

void UpdatePropRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.UpdatePropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePropRequest::CopyFrom(const UpdatePropRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.UpdatePropRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePropRequest::IsInitialized() const {
  return true;
}

void UpdatePropRequest::Swap(UpdatePropRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdatePropRequest::InternalSwap(UpdatePropRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  neuron_id_.InternalSwap(&other->neuron_id_);
  prop_id_.InternalSwap(&other->prop_id_);
  prop_val_.InternalSwap(&other->prop_val_);
  swap(block_id_, other->block_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePropRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePropResponse::InitAsDefaultInstance() {
}
class UpdatePropResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdatePropResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdatePropResponse::UpdatePropResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.UpdatePropResponse)
}
UpdatePropResponse::UpdatePropResponse(const UpdatePropResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:snn.UpdatePropResponse)
}

void UpdatePropResponse::SharedCtor() {
  success_ = false;
}

UpdatePropResponse::~UpdatePropResponse() {
  // @@protoc_insertion_point(destructor:snn.UpdatePropResponse)
  SharedDtor();
}

void UpdatePropResponse::SharedDtor() {
}

void UpdatePropResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePropResponse& UpdatePropResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePropResponse_snn_2eproto.base);
  return *internal_default_instance();
}


void UpdatePropResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.UpdatePropResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdatePropResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdatePropResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.UpdatePropResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.UpdatePropResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.UpdatePropResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdatePropResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.UpdatePropResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.UpdatePropResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePropResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.UpdatePropResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.UpdatePropResponse)
  return target;
}

size_t UpdatePropResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.UpdatePropResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePropResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.UpdatePropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePropResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePropResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.UpdatePropResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.UpdatePropResponse)
    MergeFrom(*source);
  }
}

void UpdatePropResponse::MergeFrom(const UpdatePropResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.UpdatePropResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void UpdatePropResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.UpdatePropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePropResponse::CopyFrom(const UpdatePropResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.UpdatePropResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePropResponse::IsInitialized() const {
  return true;
}

void UpdatePropResponse::Swap(UpdatePropResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdatePropResponse::InternalSwap(UpdatePropResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePropResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateGammaRequest::InitAsDefaultInstance() {
}
class UpdateGammaRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGammaRequest::kBlockIdFieldNumber;
const int UpdateGammaRequest::kPropIdFieldNumber;
const int UpdateGammaRequest::kBrainIdFieldNumber;
const int UpdateGammaRequest::kGammaConcentrationFieldNumber;
const int UpdateGammaRequest::kGammaRateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGammaRequest::UpdateGammaRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.UpdateGammaRequest)
}
UpdateGammaRequest::UpdateGammaRequest(const UpdateGammaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      prop_id_(from.prop_id_),
      brain_id_(from.brain_id_),
      gamma_concentration_(from.gamma_concentration_),
      gamma_rate_(from.gamma_rate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_ = from.block_id_;
  // @@protoc_insertion_point(copy_constructor:snn.UpdateGammaRequest)
}

void UpdateGammaRequest::SharedCtor() {
  block_id_ = 0;
}

UpdateGammaRequest::~UpdateGammaRequest() {
  // @@protoc_insertion_point(destructor:snn.UpdateGammaRequest)
  SharedDtor();
}

void UpdateGammaRequest::SharedDtor() {
}

void UpdateGammaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGammaRequest& UpdateGammaRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateGammaRequest_snn_2eproto.base);
  return *internal_default_instance();
}


void UpdateGammaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.UpdateGammaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prop_id_.Clear();
  brain_id_.Clear();
  gamma_concentration_.Clear();
  gamma_rate_.Clear();
  block_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateGammaRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .snn.PropType prop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_prop_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_prop_id(static_cast<::snn::PropType>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 brain_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_brain_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_brain_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float gamma_concentration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_gamma_concentration(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_gamma_concentration(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float gamma_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_gamma_rate(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          add_gamma_rate(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateGammaRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.UpdateGammaRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .snn.PropType prop_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_prop_id(static_cast< ::snn::PropType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_prop_id(static_cast< ::snn::PropType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 brain_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_brain_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_brain_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float gamma_concentration = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_gamma_concentration())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_gamma_concentration())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float gamma_rate = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_gamma_rate())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (45 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 42u, input, this->mutable_gamma_rate())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.UpdateGammaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.UpdateGammaRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateGammaRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.UpdateGammaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->block_id(), output);
  }

  // repeated .snn.PropType prop_id = 2;
  if (this->prop_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_prop_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->prop_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->prop_id(i), output);
  }

  // repeated int32 brain_id = 3;
  if (this->brain_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_brain_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->brain_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->brain_id(i), output);
  }

  // repeated float gamma_concentration = 4;
  if (this->gamma_concentration_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gamma_concentration_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->gamma_concentration().data(), this->gamma_concentration_size(), output);
  }

  // repeated float gamma_rate = 5;
  if (this->gamma_rate_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(5, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gamma_rate_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->gamma_rate().data(), this->gamma_rate_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.UpdateGammaRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateGammaRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.UpdateGammaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->block_id(), target);
  }

  // repeated .snn.PropType prop_id = 2;
  if (this->prop_id_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _prop_id_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->prop_id_, target);
  }

  // repeated int32 brain_id = 3;
  if (this->brain_id_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _brain_id_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->brain_id_, target);
  }

  // repeated float gamma_concentration = 4;
  if (this->gamma_concentration_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _gamma_concentration_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->gamma_concentration_, target);
  }

  // repeated float gamma_rate = 5;
  if (this->gamma_rate_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      5,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _gamma_rate_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->gamma_rate_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.UpdateGammaRequest)
  return target;
}

size_t UpdateGammaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.UpdateGammaRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snn.PropType prop_id = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->prop_id_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->prop_id(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _prop_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 brain_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->brain_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _brain_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float gamma_concentration = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->gamma_concentration_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gamma_concentration_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float gamma_rate = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->gamma_rate_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _gamma_rate_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGammaRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.UpdateGammaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGammaRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateGammaRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.UpdateGammaRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.UpdateGammaRequest)
    MergeFrom(*source);
  }
}

void UpdateGammaRequest::MergeFrom(const UpdateGammaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.UpdateGammaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prop_id_.MergeFrom(from.prop_id_);
  brain_id_.MergeFrom(from.brain_id_);
  gamma_concentration_.MergeFrom(from.gamma_concentration_);
  gamma_rate_.MergeFrom(from.gamma_rate_);
  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
}

void UpdateGammaRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.UpdateGammaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGammaRequest::CopyFrom(const UpdateGammaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.UpdateGammaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGammaRequest::IsInitialized() const {
  return true;
}

void UpdateGammaRequest::Swap(UpdateGammaRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGammaRequest::InternalSwap(UpdateGammaRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prop_id_.InternalSwap(&other->prop_id_);
  brain_id_.InternalSwap(&other->brain_id_);
  gamma_concentration_.InternalSwap(&other->gamma_concentration_);
  gamma_rate_.InternalSwap(&other->gamma_rate_);
  swap(block_id_, other->block_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateGammaRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateGammaResponse::InitAsDefaultInstance() {
}
class UpdateGammaResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGammaResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGammaResponse::UpdateGammaResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.UpdateGammaResponse)
}
UpdateGammaResponse::UpdateGammaResponse(const UpdateGammaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:snn.UpdateGammaResponse)
}

void UpdateGammaResponse::SharedCtor() {
  success_ = false;
}

UpdateGammaResponse::~UpdateGammaResponse() {
  // @@protoc_insertion_point(destructor:snn.UpdateGammaResponse)
  SharedDtor();
}

void UpdateGammaResponse::SharedDtor() {
}

void UpdateGammaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGammaResponse& UpdateGammaResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateGammaResponse_snn_2eproto.base);
  return *internal_default_instance();
}


void UpdateGammaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.UpdateGammaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateGammaResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateGammaResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.UpdateGammaResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.UpdateGammaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.UpdateGammaResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateGammaResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.UpdateGammaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.UpdateGammaResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateGammaResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.UpdateGammaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.UpdateGammaResponse)
  return target;
}

size_t UpdateGammaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.UpdateGammaResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGammaResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.UpdateGammaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGammaResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateGammaResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.UpdateGammaResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.UpdateGammaResponse)
    MergeFrom(*source);
  }
}

void UpdateGammaResponse::MergeFrom(const UpdateGammaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.UpdateGammaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void UpdateGammaResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.UpdateGammaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGammaResponse::CopyFrom(const UpdateGammaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.UpdateGammaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGammaResponse::IsInitialized() const {
  return true;
}

void UpdateGammaResponse::Swap(UpdateGammaResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGammaResponse::InternalSwap(UpdateGammaResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateGammaResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateGammaWithResultResponse::InitAsDefaultInstance() {
}
class UpdateGammaWithResultResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateGammaWithResultResponse::kBlockIdFieldNumber;
const int UpdateGammaWithResultResponse::kPropIdFieldNumber;
const int UpdateGammaWithResultResponse::kBrainIdFieldNumber;
const int UpdateGammaWithResultResponse::kPropValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateGammaWithResultResponse::UpdateGammaWithResultResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.UpdateGammaWithResultResponse)
}
UpdateGammaWithResultResponse::UpdateGammaWithResultResponse(const UpdateGammaWithResultResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      prop_val_(from.prop_val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&block_id_, &from.block_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&brain_id_) -
    reinterpret_cast<char*>(&block_id_)) + sizeof(brain_id_));
  // @@protoc_insertion_point(copy_constructor:snn.UpdateGammaWithResultResponse)
}

void UpdateGammaWithResultResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateGammaWithResultResponse_snn_2eproto.base);
  ::memset(&block_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brain_id_) -
      reinterpret_cast<char*>(&block_id_)) + sizeof(brain_id_));
}

UpdateGammaWithResultResponse::~UpdateGammaWithResultResponse() {
  // @@protoc_insertion_point(destructor:snn.UpdateGammaWithResultResponse)
  SharedDtor();
}

void UpdateGammaWithResultResponse::SharedDtor() {
}

void UpdateGammaWithResultResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateGammaWithResultResponse& UpdateGammaWithResultResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateGammaWithResultResponse_snn_2eproto.base);
  return *internal_default_instance();
}


void UpdateGammaWithResultResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.UpdateGammaWithResultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prop_val_.Clear();
  ::memset(&block_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brain_id_) -
      reinterpret_cast<char*>(&block_id_)) + sizeof(brain_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateGammaWithResultResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .snn.PropType prop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_prop_id(static_cast<::snn::PropType>(val));
        } else goto handle_unusual;
        continue;
      // int32 brain_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          brain_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes prop_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(add_prop_val(), ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 34);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateGammaWithResultResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.UpdateGammaWithResultResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .snn.PropType prop_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_prop_id(static_cast< ::snn::PropType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 brain_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &brain_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes prop_val = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->add_prop_val()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.UpdateGammaWithResultResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.UpdateGammaWithResultResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateGammaWithResultResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.UpdateGammaWithResultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->block_id(), output);
  }

  // .snn.PropType prop_id = 2;
  if (this->prop_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->prop_id(), output);
  }

  // int32 brain_id = 3;
  if (this->brain_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(3, this->brain_id(), output);
  }

  // repeated bytes prop_val = 4;
  for (int i = 0, n = this->prop_val_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytes(
      4, this->prop_val(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.UpdateGammaWithResultResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateGammaWithResultResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.UpdateGammaWithResultResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->block_id(), target);
  }

  // .snn.PropType prop_id = 2;
  if (this->prop_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->prop_id(), target);
  }

  // int32 brain_id = 3;
  if (this->brain_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->brain_id(), target);
  }

  // repeated bytes prop_val = 4;
  for (int i = 0, n = this->prop_val_size(); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteBytesToArray(4, this->prop_val(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.UpdateGammaWithResultResponse)
  return target;
}

size_t UpdateGammaWithResultResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.UpdateGammaWithResultResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes prop_val = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->prop_val_size());
  for (int i = 0, n = this->prop_val_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      this->prop_val(i));
  }

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->block_id());
  }

  // .snn.PropType prop_id = 2;
  if (this->prop_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->prop_id());
  }

  // int32 brain_id = 3;
  if (this->brain_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->brain_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateGammaWithResultResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.UpdateGammaWithResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateGammaWithResultResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateGammaWithResultResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.UpdateGammaWithResultResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.UpdateGammaWithResultResponse)
    MergeFrom(*source);
  }
}

void UpdateGammaWithResultResponse::MergeFrom(const UpdateGammaWithResultResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.UpdateGammaWithResultResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prop_val_.MergeFrom(from.prop_val_);
  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
  if (from.prop_id() != 0) {
    set_prop_id(from.prop_id());
  }
  if (from.brain_id() != 0) {
    set_brain_id(from.brain_id());
  }
}

void UpdateGammaWithResultResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.UpdateGammaWithResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateGammaWithResultResponse::CopyFrom(const UpdateGammaWithResultResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.UpdateGammaWithResultResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateGammaWithResultResponse::IsInitialized() const {
  return true;
}

void UpdateGammaWithResultResponse::Swap(UpdateGammaWithResultResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateGammaWithResultResponse::InternalSwap(UpdateGammaWithResultResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prop_val_.InternalSwap(CastToBase(&other->prop_val_));
  swap(block_id_, other->block_id_);
  swap(prop_id_, other->prop_id_);
  swap(brain_id_, other->brain_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateGammaWithResultResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateHyperParaRequest::InitAsDefaultInstance() {
}
class UpdateHyperParaRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateHyperParaRequest::kBlockIdFieldNumber;
const int UpdateHyperParaRequest::kPropIdFieldNumber;
const int UpdateHyperParaRequest::kBrainIdFieldNumber;
const int UpdateHyperParaRequest::kHparaValFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateHyperParaRequest::UpdateHyperParaRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.UpdateHyperParaRequest)
}
UpdateHyperParaRequest::UpdateHyperParaRequest(const UpdateHyperParaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      prop_id_(from.prop_id_),
      brain_id_(from.brain_id_),
      hpara_val_(from.hpara_val_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_ = from.block_id_;
  // @@protoc_insertion_point(copy_constructor:snn.UpdateHyperParaRequest)
}

void UpdateHyperParaRequest::SharedCtor() {
  block_id_ = 0;
}

UpdateHyperParaRequest::~UpdateHyperParaRequest() {
  // @@protoc_insertion_point(destructor:snn.UpdateHyperParaRequest)
  SharedDtor();
}

void UpdateHyperParaRequest::SharedDtor() {
}

void UpdateHyperParaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateHyperParaRequest& UpdateHyperParaRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateHyperParaRequest_snn_2eproto.base);
  return *internal_default_instance();
}


void UpdateHyperParaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.UpdateHyperParaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prop_id_.Clear();
  brain_id_.Clear();
  hpara_val_.Clear();
  block_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateHyperParaRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .snn.PropType prop_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_prop_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          add_prop_id(static_cast<::snn::PropType>(val));
        } else goto handle_unusual;
        continue;
      // repeated int32 brain_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_brain_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_brain_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float hpara_val = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(mutable_hpara_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37) {
          add_hpara_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateHyperParaRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.UpdateHyperParaRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .snn.PropType prop_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          ::PROTOBUF_NAMESPACE_ID::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value = 0;
            DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_prop_id(static_cast< ::snn::PropType >(value));
          }
          input->PopLimit(limit);
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_prop_id(static_cast< ::snn::PropType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 brain_id = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_brain_id())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_brain_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float hpara_val = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_hpara_val())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34u, input, this->mutable_hpara_val())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.UpdateHyperParaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.UpdateHyperParaRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateHyperParaRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.UpdateHyperParaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->block_id(), output);
  }

  // repeated .snn.PropType prop_id = 2;
  if (this->prop_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_prop_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->prop_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTag(
      this->prop_id(i), output);
  }

  // repeated int32 brain_id = 3;
  if (this->brain_id_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_brain_id_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->brain_id_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->brain_id(i), output);
  }

  // repeated float hpara_val = 4;
  if (this->hpara_val_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(4, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hpara_val_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatArray(
      this->hpara_val().data(), this->hpara_val_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.UpdateHyperParaRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateHyperParaRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.UpdateHyperParaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->block_id(), target);
  }

  // repeated .snn.PropType prop_id = 2;
  if (this->prop_id_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(      _prop_id_cached_byte_size_.load(std::memory_order_relaxed),
        target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->prop_id_, target);
  }

  // repeated int32 brain_id = 3;
  if (this->brain_id_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _brain_id_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->brain_id_, target);
  }

  // repeated float hpara_val = 4;
  if (this->hpara_val_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      4,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _hpara_val_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->hpara_val_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.UpdateHyperParaRequest)
  return target;
}

size_t UpdateHyperParaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.UpdateHyperParaRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .snn.PropType prop_id = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->prop_id_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->prop_id(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _prop_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 brain_id = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->brain_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _brain_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float hpara_val = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->hpara_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _hpara_val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateHyperParaRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.UpdateHyperParaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateHyperParaRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateHyperParaRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.UpdateHyperParaRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.UpdateHyperParaRequest)
    MergeFrom(*source);
  }
}

void UpdateHyperParaRequest::MergeFrom(const UpdateHyperParaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.UpdateHyperParaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prop_id_.MergeFrom(from.prop_id_);
  brain_id_.MergeFrom(from.brain_id_);
  hpara_val_.MergeFrom(from.hpara_val_);
  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
}

void UpdateHyperParaRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.UpdateHyperParaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateHyperParaRequest::CopyFrom(const UpdateHyperParaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.UpdateHyperParaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateHyperParaRequest::IsInitialized() const {
  return true;
}

void UpdateHyperParaRequest::Swap(UpdateHyperParaRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateHyperParaRequest::InternalSwap(UpdateHyperParaRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  prop_id_.InternalSwap(&other->prop_id_);
  brain_id_.InternalSwap(&other->brain_id_);
  hpara_val_.InternalSwap(&other->hpara_val_);
  swap(block_id_, other->block_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateHyperParaRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateHyperParaResponse::InitAsDefaultInstance() {
}
class UpdateHyperParaResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateHyperParaResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateHyperParaResponse::UpdateHyperParaResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.UpdateHyperParaResponse)
}
UpdateHyperParaResponse::UpdateHyperParaResponse(const UpdateHyperParaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:snn.UpdateHyperParaResponse)
}

void UpdateHyperParaResponse::SharedCtor() {
  success_ = false;
}

UpdateHyperParaResponse::~UpdateHyperParaResponse() {
  // @@protoc_insertion_point(destructor:snn.UpdateHyperParaResponse)
  SharedDtor();
}

void UpdateHyperParaResponse::SharedDtor() {
}

void UpdateHyperParaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateHyperParaResponse& UpdateHyperParaResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateHyperParaResponse_snn_2eproto.base);
  return *internal_default_instance();
}


void UpdateHyperParaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.UpdateHyperParaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateHyperParaResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateHyperParaResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.UpdateHyperParaResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.UpdateHyperParaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.UpdateHyperParaResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateHyperParaResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.UpdateHyperParaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.UpdateHyperParaResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateHyperParaResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.UpdateHyperParaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.UpdateHyperParaResponse)
  return target;
}

size_t UpdateHyperParaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.UpdateHyperParaResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateHyperParaResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.UpdateHyperParaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateHyperParaResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateHyperParaResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.UpdateHyperParaResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.UpdateHyperParaResponse)
    MergeFrom(*source);
  }
}

void UpdateHyperParaResponse::MergeFrom(const UpdateHyperParaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.UpdateHyperParaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void UpdateHyperParaResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.UpdateHyperParaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateHyperParaResponse::CopyFrom(const UpdateHyperParaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.UpdateHyperParaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateHyperParaResponse::IsInitialized() const {
  return true;
}

void UpdateHyperParaResponse::Swap(UpdateHyperParaResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateHyperParaResponse::InternalSwap(UpdateHyperParaResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateHyperParaResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSampleRequest::InitAsDefaultInstance() {
}
class UpdateSampleRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSampleRequest::kBlockIdFieldNumber;
const int UpdateSampleRequest::kSampleIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSampleRequest::UpdateSampleRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.UpdateSampleRequest)
}
UpdateSampleRequest::UpdateSampleRequest(const UpdateSampleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sample_idx_(from.sample_idx_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  block_id_ = from.block_id_;
  // @@protoc_insertion_point(copy_constructor:snn.UpdateSampleRequest)
}

void UpdateSampleRequest::SharedCtor() {
  block_id_ = 0;
}

UpdateSampleRequest::~UpdateSampleRequest() {
  // @@protoc_insertion_point(destructor:snn.UpdateSampleRequest)
  SharedDtor();
}

void UpdateSampleRequest::SharedDtor() {
}

void UpdateSampleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSampleRequest& UpdateSampleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSampleRequest_snn_2eproto.base);
  return *internal_default_instance();
}


void UpdateSampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.UpdateSampleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sample_idx_.Clear();
  block_id_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateSampleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 block_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          block_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 sample_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_sample_idx(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_sample_idx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateSampleRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.UpdateSampleRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 block_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 sample_idx = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_sample_idx())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_sample_idx())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.UpdateSampleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.UpdateSampleRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateSampleRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.UpdateSampleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->block_id(), output);
  }

  // repeated int32 sample_idx = 2;
  if (this->sample_idx_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sample_idx_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->sample_idx_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->sample_idx(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.UpdateSampleRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSampleRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.UpdateSampleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->block_id(), target);
  }

  // repeated int32 sample_idx = 2;
  if (this->sample_idx_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _sample_idx_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->sample_idx_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.UpdateSampleRequest)
  return target;
}

size_t UpdateSampleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.UpdateSampleRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 sample_idx = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->sample_idx_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _sample_idx_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 block_id = 1;
  if (this->block_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->block_id());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSampleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.UpdateSampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSampleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSampleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.UpdateSampleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.UpdateSampleRequest)
    MergeFrom(*source);
  }
}

void UpdateSampleRequest::MergeFrom(const UpdateSampleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.UpdateSampleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sample_idx_.MergeFrom(from.sample_idx_);
  if (from.block_id() != 0) {
    set_block_id(from.block_id());
  }
}

void UpdateSampleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.UpdateSampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSampleRequest::CopyFrom(const UpdateSampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.UpdateSampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSampleRequest::IsInitialized() const {
  return true;
}

void UpdateSampleRequest::Swap(UpdateSampleRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateSampleRequest::InternalSwap(UpdateSampleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sample_idx_.InternalSwap(&other->sample_idx_);
  swap(block_id_, other->block_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSampleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSampleResponse::InitAsDefaultInstance() {
}
class UpdateSampleResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSampleResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSampleResponse::UpdateSampleResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.UpdateSampleResponse)
}
UpdateSampleResponse::UpdateSampleResponse(const UpdateSampleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:snn.UpdateSampleResponse)
}

void UpdateSampleResponse::SharedCtor() {
  success_ = false;
}

UpdateSampleResponse::~UpdateSampleResponse() {
  // @@protoc_insertion_point(destructor:snn.UpdateSampleResponse)
  SharedDtor();
}

void UpdateSampleResponse::SharedDtor() {
}

void UpdateSampleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSampleResponse& UpdateSampleResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSampleResponse_snn_2eproto.base);
  return *internal_default_instance();
}


void UpdateSampleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.UpdateSampleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UpdateSampleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UpdateSampleResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.UpdateSampleResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.UpdateSampleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.UpdateSampleResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UpdateSampleResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.UpdateSampleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.UpdateSampleResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSampleResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.UpdateSampleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.UpdateSampleResponse)
  return target;
}

size_t UpdateSampleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.UpdateSampleResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSampleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.UpdateSampleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSampleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSampleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.UpdateSampleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.UpdateSampleResponse)
    MergeFrom(*source);
  }
}

void UpdateSampleResponse::MergeFrom(const UpdateSampleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.UpdateSampleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void UpdateSampleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.UpdateSampleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSampleResponse::CopyFrom(const UpdateSampleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.UpdateSampleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSampleResponse::IsInitialized() const {
  return true;
}

void UpdateSampleResponse::Swap(UpdateSampleResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpdateSampleResponse::InternalSwap(UpdateSampleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSampleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShutdownRequest::InitAsDefaultInstance() {
}
class ShutdownRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownRequest::ShutdownRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.ShutdownRequest)
}
ShutdownRequest::ShutdownRequest(const ShutdownRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:snn.ShutdownRequest)
}

void ShutdownRequest::SharedCtor() {
}

ShutdownRequest::~ShutdownRequest() {
  // @@protoc_insertion_point(destructor:snn.ShutdownRequest)
  SharedDtor();
}

void ShutdownRequest::SharedDtor() {
}

void ShutdownRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShutdownRequest& ShutdownRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShutdownRequest_snn_2eproto.base);
  return *internal_default_instance();
}


void ShutdownRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.ShutdownRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShutdownRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShutdownRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.ShutdownRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:snn.ShutdownRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.ShutdownRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShutdownRequest::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.ShutdownRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.ShutdownRequest)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutdownRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.ShutdownRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.ShutdownRequest)
  return target;
}

size_t ShutdownRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.ShutdownRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShutdownRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.ShutdownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShutdownRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.ShutdownRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.ShutdownRequest)
    MergeFrom(*source);
  }
}

void ShutdownRequest::MergeFrom(const ShutdownRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.ShutdownRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ShutdownRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.ShutdownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownRequest::CopyFrom(const ShutdownRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.ShutdownRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownRequest::IsInitialized() const {
  return true;
}

void ShutdownRequest::Swap(ShutdownRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownRequest::InternalSwap(ShutdownRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShutdownResponse::InitAsDefaultInstance() {
}
class ShutdownResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShutdownResponse::kShutdownFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShutdownResponse::ShutdownResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:snn.ShutdownResponse)
}
ShutdownResponse::ShutdownResponse(const ShutdownResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  shutdown_ = from.shutdown_;
  // @@protoc_insertion_point(copy_constructor:snn.ShutdownResponse)
}

void ShutdownResponse::SharedCtor() {
  shutdown_ = false;
}

ShutdownResponse::~ShutdownResponse() {
  // @@protoc_insertion_point(destructor:snn.ShutdownResponse)
  SharedDtor();
}

void ShutdownResponse::SharedDtor() {
}

void ShutdownResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShutdownResponse& ShutdownResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShutdownResponse_snn_2eproto.base);
  return *internal_default_instance();
}


void ShutdownResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:snn.ShutdownResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shutdown_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShutdownResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool shutdown = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShutdownResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:snn.ShutdownResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool shutdown = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shutdown_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:snn.ShutdownResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:snn.ShutdownResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ShutdownResponse::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:snn.ShutdownResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool shutdown = 1;
  if (this->shutdown() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(1, this->shutdown(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:snn.ShutdownResponse)
}

::PROTOBUF_NAMESPACE_ID::uint8* ShutdownResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:snn.ShutdownResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool shutdown = 1;
  if (this->shutdown() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->shutdown(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:snn.ShutdownResponse)
  return target;
}

size_t ShutdownResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:snn.ShutdownResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool shutdown = 1;
  if (this->shutdown() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShutdownResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:snn.ShutdownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ShutdownResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShutdownResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:snn.ShutdownResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:snn.ShutdownResponse)
    MergeFrom(*source);
  }
}

void ShutdownResponse::MergeFrom(const ShutdownResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:snn.ShutdownResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shutdown() != 0) {
    set_shutdown(from.shutdown());
  }
}

void ShutdownResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:snn.ShutdownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShutdownResponse::CopyFrom(const ShutdownResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:snn.ShutdownResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownResponse::IsInitialized() const {
  return true;
}

void ShutdownResponse::Swap(ShutdownResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShutdownResponse::InternalSwap(ShutdownResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shutdown_, other->shutdown_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace snn
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::snn::InitRequest* Arena::CreateMaybeMessage< ::snn::InitRequest >(Arena* arena) {
  return Arena::CreateInternal< ::snn::InitRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::SubblockInfo* Arena::CreateMaybeMessage< ::snn::SubblockInfo >(Arena* arena) {
  return Arena::CreateInternal< ::snn::SubblockInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::InitResponse* Arena::CreateMaybeMessage< ::snn::InitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::snn::InitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::RunRequest* Arena::CreateMaybeMessage< ::snn::RunRequest >(Arena* arena) {
  return Arena::CreateInternal< ::snn::RunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::RunResponse* Arena::CreateMaybeMessage< ::snn::RunResponse >(Arena* arena) {
  return Arena::CreateInternal< ::snn::RunResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::MetricRequest* Arena::CreateMaybeMessage< ::snn::MetricRequest >(Arena* arena) {
  return Arena::CreateInternal< ::snn::MetricRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::MetricInfo* Arena::CreateMaybeMessage< ::snn::MetricInfo >(Arena* arena) {
  return Arena::CreateInternal< ::snn::MetricInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::MetricResponse* Arena::CreateMaybeMessage< ::snn::MetricResponse >(Arena* arena) {
  return Arena::CreateInternal< ::snn::MetricResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::UpdatePropRequest* Arena::CreateMaybeMessage< ::snn::UpdatePropRequest >(Arena* arena) {
  return Arena::CreateInternal< ::snn::UpdatePropRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::UpdatePropResponse* Arena::CreateMaybeMessage< ::snn::UpdatePropResponse >(Arena* arena) {
  return Arena::CreateInternal< ::snn::UpdatePropResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::UpdateGammaRequest* Arena::CreateMaybeMessage< ::snn::UpdateGammaRequest >(Arena* arena) {
  return Arena::CreateInternal< ::snn::UpdateGammaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::UpdateGammaResponse* Arena::CreateMaybeMessage< ::snn::UpdateGammaResponse >(Arena* arena) {
  return Arena::CreateInternal< ::snn::UpdateGammaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::UpdateGammaWithResultResponse* Arena::CreateMaybeMessage< ::snn::UpdateGammaWithResultResponse >(Arena* arena) {
  return Arena::CreateInternal< ::snn::UpdateGammaWithResultResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::UpdateHyperParaRequest* Arena::CreateMaybeMessage< ::snn::UpdateHyperParaRequest >(Arena* arena) {
  return Arena::CreateInternal< ::snn::UpdateHyperParaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::UpdateHyperParaResponse* Arena::CreateMaybeMessage< ::snn::UpdateHyperParaResponse >(Arena* arena) {
  return Arena::CreateInternal< ::snn::UpdateHyperParaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::UpdateSampleRequest* Arena::CreateMaybeMessage< ::snn::UpdateSampleRequest >(Arena* arena) {
  return Arena::CreateInternal< ::snn::UpdateSampleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::UpdateSampleResponse* Arena::CreateMaybeMessage< ::snn::UpdateSampleResponse >(Arena* arena) {
  return Arena::CreateInternal< ::snn::UpdateSampleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::ShutdownRequest* Arena::CreateMaybeMessage< ::snn::ShutdownRequest >(Arena* arena) {
  return Arena::CreateInternal< ::snn::ShutdownRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::snn::ShutdownResponse* Arena::CreateMaybeMessage< ::snn::ShutdownResponse >(Arena* arena) {
  return Arena::CreateInternal< ::snn::ShutdownResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
